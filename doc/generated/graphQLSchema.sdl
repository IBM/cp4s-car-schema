directive @cost(complexity: Int = 1, useMultipliers: Boolean, multipliers: [String]) on FIELD_DEFINITION
type Query {

  "Default items = 100, use limit filter to adjust"
  assets(
    """
    Specifies how many elements should be at most included in the result.
    """
    limit: Int = 100
    """
    Specifies how many elements from the result shall be skipped.
    If limit is not specified, this argument is ignored.
    """
    offset: Int
  
    """
    Specifies the field names to sort the results by in ascending or descending order.
    """
    orderBy: [ AssetSort ]
    
    """
    Global filter is applied to each collection in all of the search range.
    It is automatically joined with other arguments in each search level by 'AND' conjunction.
    """
    globalFilter: GlobalFilter
    
    
    """
    Provides advanced search via multiple operators in a single search level.
    It is automatically joined with other arguments in the same search level by 'AND' conjunction.
    """
    filter: AssetFilter): [Asset]
      @cost(complexity: 0, multipliers: ["limit"])
  

  "Default items = 100, use limit filter to adjust"
  containers(
    """
    Specifies how many elements should be at most included in the result.
    """
    limit: Int = 100
    """
    Specifies how many elements from the result shall be skipped.
    If limit is not specified, this argument is ignored.
    """
    offset: Int
  
    """
    Specifies the field names to sort the results by in ascending or descending order.
    """
    orderBy: [ ContainerSort ]
    
    """
    Global filter is applied to each collection in all of the search range.
    It is automatically joined with other arguments in each search level by 'AND' conjunction.
    """
    globalFilter: GlobalFilter
    
    
    """
    Provides advanced search via multiple operators in a single search level.
    It is automatically joined with other arguments in the same search level by 'AND' conjunction.
    """
    filter: ContainerFilter): [Container]
      @cost(complexity: 0, multipliers: ["limit"])
  

  "Default items = 100, use limit filter to adjust"
  ipAddrs(
    """
    Specifies how many elements should be at most included in the result.
    """
    limit: Int = 100
    """
    Specifies how many elements from the result shall be skipped.
    If limit is not specified, this argument is ignored.
    """
    offset: Int
  
    """
    Specifies the field names to sort the results by in ascending or descending order.
    """
    orderBy: [ IpAddrSort ]
    
    """
    Global filter is applied to each collection in all of the search range.
    It is automatically joined with other arguments in each search level by 'AND' conjunction.
    """
    globalFilter: GlobalFilter
    
    
    """
    Provides advanced search via multiple operators in a single search level.
    It is automatically joined with other arguments in the same search level by 'AND' conjunction.
    """
    filter: IpAddrFilter): [IpAddr]
      @cost(complexity: 0, multipliers: ["limit"])
  

  "Default items = 100, use limit filter to adjust"
  unifiedUsers(
    """
    Specifies how many elements should be at most included in the result.
    """
    limit: Int = 100
    """
    Specifies how many elements from the result shall be skipped.
    If limit is not specified, this argument is ignored.
    """
    offset: Int
  
    """
    Specifies the field names to sort the results by in ascending or descending order.
    """
    orderBy: [ UnifiedUserSort ]
    
    """
    Global filter is applied to each collection in all of the search range.
    It is automatically joined with other arguments in each search level by 'AND' conjunction.
    """
    globalFilter: GlobalFilter
    
    
    """
    Provides advanced search via multiple operators in a single search level.
    It is automatically joined with other arguments in the same search level by 'AND' conjunction.
    """
    filter: UnifiedUserFilter): [UnifiedUser]
      @cost(complexity: 0, multipliers: ["limit"])
  

  "Default items = 100, use limit filter to adjust"
  users(
    """
    Specifies how many elements should be at most included in the result.
    """
    limit: Int = 100
    """
    Specifies how many elements from the result shall be skipped.
    If limit is not specified, this argument is ignored.
    """
    offset: Int
  
    """
    Specifies the field names to sort the results by in ascending or descending order.
    """
    orderBy: [ UserSort ]
    
    """
    Global filter is applied to each collection in all of the search range.
    It is automatically joined with other arguments in each search level by 'AND' conjunction.
    """
    globalFilter: GlobalFilter
    
    
    """
    Provides advanced search via multiple operators in a single search level.
    It is automatically joined with other arguments in the same search level by 'AND' conjunction.
    """
    filter: UserFilter): [User]
      @cost(complexity: 0, multipliers: ["limit"])
  

  "Default items = 100, use limit filter to adjust"
  unifiedAccounts(
    """
    Specifies how many elements should be at most included in the result.
    """
    limit: Int = 100
    """
    Specifies how many elements from the result shall be skipped.
    If limit is not specified, this argument is ignored.
    """
    offset: Int
  
    """
    Specifies the field names to sort the results by in ascending or descending order.
    """
    orderBy: [ UnifiedAccountSort ]
    
    """
    Global filter is applied to each collection in all of the search range.
    It is automatically joined with other arguments in each search level by 'AND' conjunction.
    """
    globalFilter: GlobalFilter
    
    
    """
    Provides advanced search via multiple operators in a single search level.
    It is automatically joined with other arguments in the same search level by 'AND' conjunction.
    """
    filter: UnifiedAccountFilter): [UnifiedAccount]
      @cost(complexity: 0, multipliers: ["limit"])
  

  "Default items = 100, use limit filter to adjust"
  accounts(
    """
    Specifies how many elements should be at most included in the result.
    """
    limit: Int = 100
    """
    Specifies how many elements from the result shall be skipped.
    If limit is not specified, this argument is ignored.
    """
    offset: Int
  
    """
    Specifies the field names to sort the results by in ascending or descending order.
    """
    orderBy: [ AccountSort ]
    
    """
    Global filter is applied to each collection in all of the search range.
    It is automatically joined with other arguments in each search level by 'AND' conjunction.
    """
    globalFilter: GlobalFilter
    
    
    """
    Provides advanced search via multiple operators in a single search level.
    It is automatically joined with other arguments in the same search level by 'AND' conjunction.
    """
    filter: AccountFilter): [Account]
      @cost(complexity: 0, multipliers: ["limit"])
  

  "Default items = 100, use limit filter to adjust"
  applications(
    """
    Specifies how many elements should be at most included in the result.
    """
    limit: Int = 100
    """
    Specifies how many elements from the result shall be skipped.
    If limit is not specified, this argument is ignored.
    """
    offset: Int
  
    """
    Specifies the field names to sort the results by in ascending or descending order.
    """
    orderBy: [ ApplicationSort ]
    
    """
    Global filter is applied to each collection in all of the search range.
    It is automatically joined with other arguments in each search level by 'AND' conjunction.
    """
    globalFilter: GlobalFilter
    
    
    """
    Provides advanced search via multiple operators in a single search level.
    It is automatically joined with other arguments in the same search level by 'AND' conjunction.
    """
    filter: ApplicationFilter): [Application]
      @cost(complexity: 0, multipliers: ["limit"])
  

  "Default items = 100, use limit filter to adjust"
  hostnames(
    """
    Specifies how many elements should be at most included in the result.
    """
    limit: Int = 100
    """
    Specifies how many elements from the result shall be skipped.
    If limit is not specified, this argument is ignored.
    """
    offset: Int
  
    """
    Specifies the field names to sort the results by in ascending or descending order.
    """
    orderBy: [ HostnameSort ]
    
    """
    Global filter is applied to each collection in all of the search range.
    It is automatically joined with other arguments in each search level by 'AND' conjunction.
    """
    globalFilter: GlobalFilter
    
    
    """
    Provides advanced search via multiple operators in a single search level.
    It is automatically joined with other arguments in the same search level by 'AND' conjunction.
    """
    filter: HostnameFilter): [Hostname]
      @cost(complexity: 0, multipliers: ["limit"])
  

  "Default items = 100, use limit filter to adjust"
  businessprocesses(
    """
    Specifies how many elements should be at most included in the result.
    """
    limit: Int = 100
    """
    Specifies how many elements from the result shall be skipped.
    If limit is not specified, this argument is ignored.
    """
    offset: Int
  
    """
    Specifies the field names to sort the results by in ascending or descending order.
    """
    orderBy: [ BusinessprocessSort ]
    
    """
    Global filter is applied to each collection in all of the search range.
    It is automatically joined with other arguments in each search level by 'AND' conjunction.
    """
    globalFilter: GlobalFilter
    
    
    """
    Provides advanced search via multiple operators in a single search level.
    It is automatically joined with other arguments in the same search level by 'AND' conjunction.
    """
    filter: BusinessprocessFilter): [Businessprocess]
      @cost(complexity: 0, multipliers: ["limit"])
  

  "Default items = 100, use limit filter to adjust"
  databases(
    """
    Specifies how many elements should be at most included in the result.
    """
    limit: Int = 100
    """
    Specifies how many elements from the result shall be skipped.
    If limit is not specified, this argument is ignored.
    """
    offset: Int
  
    """
    Specifies the field names to sort the results by in ascending or descending order.
    """
    orderBy: [ DatabaseSort ]
    
    """
    Global filter is applied to each collection in all of the search range.
    It is automatically joined with other arguments in each search level by 'AND' conjunction.
    """
    globalFilter: GlobalFilter
    
    
    """
    Provides advanced search via multiple operators in a single search level.
    It is automatically joined with other arguments in the same search level by 'AND' conjunction.
    """
    filter: DatabaseFilter): [Database]
      @cost(complexity: 0, multipliers: ["limit"])
  

  "Default items = 100, use limit filter to adjust"
  macAddrs(
    """
    Specifies how many elements should be at most included in the result.
    """
    limit: Int = 100
    """
    Specifies how many elements from the result shall be skipped.
    If limit is not specified, this argument is ignored.
    """
    offset: Int
  
    """
    Specifies the field names to sort the results by in ascending or descending order.
    """
    orderBy: [ MacAddrSort ]
    
    """
    Global filter is applied to each collection in all of the search range.
    It is automatically joined with other arguments in each search level by 'AND' conjunction.
    """
    globalFilter: GlobalFilter
    
    
    """
    Provides advanced search via multiple operators in a single search level.
    It is automatically joined with other arguments in the same search level by 'AND' conjunction.
    """
    filter: MacAddrFilter): [MacAddr]
      @cost(complexity: 0, multipliers: ["limit"])
  

  "Default items = 100, use limit filter to adjust"
  reports(
    """
    Specifies how many elements should be at most included in the result.
    """
    limit: Int = 100
    """
    Specifies how many elements from the result shall be skipped.
    If limit is not specified, this argument is ignored.
    """
    offset: Int
  
    """
    Specifies the field names to sort the results by in ascending or descending order.
    """
    orderBy: [ ReportSort ]
    
    """
    Global filter is applied to each collection in all of the search range.
    It is automatically joined with other arguments in each search level by 'AND' conjunction.
    """
    globalFilter: GlobalFilter
    
    
    """
    Provides advanced search via multiple operators in a single search level.
    It is automatically joined with other arguments in the same search level by 'AND' conjunction.
    """
    filter: ReportFilter): [Report]
      @cost(complexity: 0, multipliers: ["limit"])
  

  "Default items = 100, use limit filter to adjust"
  ports(
    """
    Specifies how many elements should be at most included in the result.
    """
    limit: Int = 100
    """
    Specifies how many elements from the result shall be skipped.
    If limit is not specified, this argument is ignored.
    """
    offset: Int
  
    """
    Specifies the field names to sort the results by in ascending or descending order.
    """
    orderBy: [ PortSort ]
    
    """
    Global filter is applied to each collection in all of the search range.
    It is automatically joined with other arguments in each search level by 'AND' conjunction.
    """
    globalFilter: GlobalFilter
    
    
    """
    Provides advanced search via multiple operators in a single search level.
    It is automatically joined with other arguments in the same search level by 'AND' conjunction.
    """
    filter: PortFilter): [Port]
      @cost(complexity: 0, multipliers: ["limit"])
  

  "Default items = 100, use limit filter to adjust"
  sources(
    """
    Specifies how many elements should be at most included in the result.
    """
    limit: Int = 100
    """
    Specifies how many elements from the result shall be skipped.
    If limit is not specified, this argument is ignored.
    """
    offset: Int
  
    """
    Specifies the field names to sort the results by in ascending or descending order.
    """
    orderBy: [ SourceSort ]
    
    """
    Global filter is applied to each collection in all of the search range.
    It is automatically joined with other arguments in each search level by 'AND' conjunction.
    """
    globalFilter: GlobalFilter
    
    
    """
    Provides advanced search via multiple operators in a single search level.
    It is automatically joined with other arguments in the same search level by 'AND' conjunction.
    """
    filter: SourceFilter): [Source]
      @cost(complexity: 0, multipliers: ["limit"])
  

  "Default items = 100, use limit filter to adjust"
  vulnerabilities(
    """
    Specifies how many elements should be at most included in the result.
    """
    limit: Int = 100
    """
    Specifies how many elements from the result shall be skipped.
    If limit is not specified, this argument is ignored.
    """
    offset: Int
  
    """
    Specifies the field names to sort the results by in ascending or descending order.
    """
    orderBy: [ VulnerabilitySort ]
    
    """
    Global filter is applied to each collection in all of the search range.
    It is automatically joined with other arguments in each search level by 'AND' conjunction.
    """
    globalFilter: GlobalFilter
    
    
    """
    Provides advanced search via multiple operators in a single search level.
    It is automatically joined with other arguments in the same search level by 'AND' conjunction.
    """
    filter: VulnerabilityFilter): [Vulnerability]
      @cost(complexity: 0, multipliers: ["limit"])
  

  "Default items = 100, use limit filter to adjust"
  tags(
    """
    Specifies how many elements should be at most included in the result.
    """
    limit: Int = 100
    """
    Specifies how many elements from the result shall be skipped.
    If limit is not specified, this argument is ignored.
    """
    offset: Int
  
    """
    Specifies the field names to sort the results by in ascending or descending order.
    """
    orderBy: [ TagSort ]
    
    """
    Global filter is applied to each collection in all of the search range.
    It is automatically joined with other arguments in each search level by 'AND' conjunction.
    """
    globalFilter: GlobalFilter
    
    
    """
    Provides advanced search via multiple operators in a single search level.
    It is automatically joined with other arguments in the same search level by 'AND' conjunction.
    """
    filter: TagFilter): [Tag]
      @cost(complexity: 0, multipliers: ["limit"])
  

  "Default items = 100, use limit filter to adjust"
  geolocations(
    """
    Specifies how many elements should be at most included in the result.
    """
    limit: Int = 100
    """
    Specifies how many elements from the result shall be skipped.
    If limit is not specified, this argument is ignored.
    """
    offset: Int
  
    """
    Specifies the field names to sort the results by in ascending or descending order.
    """
    orderBy: [ GeolocationSort ]
    
    """
    Global filter is applied to each collection in all of the search range.
    It is automatically joined with other arguments in each search level by 'AND' conjunction.
    """
    globalFilter: GlobalFilter
    
    
    """
    Provides advanced search via multiple operators in a single search level.
    It is automatically joined with other arguments in the same search level by 'AND' conjunction.
    """
    filter: GeolocationFilter): [Geolocation]
      @cost(complexity: 0, multipliers: ["limit"])
  

  "Default items = 100, use limit filter to adjust"
  assetVulnerabilityEdges(
    """
    Specifies how many elements should be at most included in the result.
    """
    limit: Int = 100
    """
    Specifies how many elements from the result shall be skipped.
    If limit is not specified, this argument is ignored.
    """
    offset: Int
  
    """
    Specifies the field names to sort the results by in ascending or descending order.
    """
    orderBy: [ AssetVulnerabilityEdgeSort ]
    
    """
    Global filter is applied to each collection in all of the search range.
    It is automatically joined with other arguments in each search level by 'AND' conjunction.
    """
    globalFilter: GlobalFilter
    
    
    """
    Provides advanced search via multiple operators in a single search level.
    It is automatically joined with other arguments in the same search level by 'AND' conjunction.
    """
    filter: AssetVulnerabilityEdgeFilter): [AssetVulnerabilityEdge]
      @cost(complexity: 0, multipliers: ["limit"])
  

  "Default items = 100, use limit filter to adjust"
  assetIpAddrEdges(
    """
    Specifies how many elements should be at most included in the result.
    """
    limit: Int = 100
    """
    Specifies how many elements from the result shall be skipped.
    If limit is not specified, this argument is ignored.
    """
    offset: Int
  
    """
    Specifies the field names to sort the results by in ascending or descending order.
    """
    orderBy: [ AssetIpAddrEdgeSort ]
    
    """
    Global filter is applied to each collection in all of the search range.
    It is automatically joined with other arguments in each search level by 'AND' conjunction.
    """
    globalFilter: GlobalFilter
    
    
    """
    Provides advanced search via multiple operators in a single search level.
    It is automatically joined with other arguments in the same search level by 'AND' conjunction.
    """
    filter: AssetIpAddrEdgeFilter): [AssetIpAddrEdge]
      @cost(complexity: 0, multipliers: ["limit"])
  

  "Default items = 100, use limit filter to adjust"
  assetMacAddrEdges(
    """
    Specifies how many elements should be at most included in the result.
    """
    limit: Int = 100
    """
    Specifies how many elements from the result shall be skipped.
    If limit is not specified, this argument is ignored.
    """
    offset: Int
  
    """
    Specifies the field names to sort the results by in ascending or descending order.
    """
    orderBy: [ AssetMacAddrEdgeSort ]
    
    """
    Global filter is applied to each collection in all of the search range.
    It is automatically joined with other arguments in each search level by 'AND' conjunction.
    """
    globalFilter: GlobalFilter
    
    
    """
    Provides advanced search via multiple operators in a single search level.
    It is automatically joined with other arguments in the same search level by 'AND' conjunction.
    """
    filter: AssetMacAddrEdgeFilter): [AssetMacAddrEdge]
      @cost(complexity: 0, multipliers: ["limit"])
  

  "Default items = 100, use limit filter to adjust"
  assetHostnameEdges(
    """
    Specifies how many elements should be at most included in the result.
    """
    limit: Int = 100
    """
    Specifies how many elements from the result shall be skipped.
    If limit is not specified, this argument is ignored.
    """
    offset: Int
  
    """
    Specifies the field names to sort the results by in ascending or descending order.
    """
    orderBy: [ AssetHostnameEdgeSort ]
    
    """
    Global filter is applied to each collection in all of the search range.
    It is automatically joined with other arguments in each search level by 'AND' conjunction.
    """
    globalFilter: GlobalFilter
    
    
    """
    Provides advanced search via multiple operators in a single search level.
    It is automatically joined with other arguments in the same search level by 'AND' conjunction.
    """
    filter: AssetHostnameEdgeFilter): [AssetHostnameEdge]
      @cost(complexity: 0, multipliers: ["limit"])
  

  "Default items = 100, use limit filter to adjust"
  assetAccountEdges(
    """
    Specifies how many elements should be at most included in the result.
    """
    limit: Int = 100
    """
    Specifies how many elements from the result shall be skipped.
    If limit is not specified, this argument is ignored.
    """
    offset: Int
  
    """
    Specifies the field names to sort the results by in ascending or descending order.
    """
    orderBy: [ AssetAccountEdgeSort ]
    
    """
    Global filter is applied to each collection in all of the search range.
    It is automatically joined with other arguments in each search level by 'AND' conjunction.
    """
    globalFilter: GlobalFilter
    
    
    """
    Provides advanced search via multiple operators in a single search level.
    It is automatically joined with other arguments in the same search level by 'AND' conjunction.
    """
    filter: AssetAccountEdgeFilter): [AssetAccountEdge]
      @cost(complexity: 0, multipliers: ["limit"])
  

  "Default items = 100, use limit filter to adjust"
  assetContainerEdges(
    """
    Specifies how many elements should be at most included in the result.
    """
    limit: Int = 100
    """
    Specifies how many elements from the result shall be skipped.
    If limit is not specified, this argument is ignored.
    """
    offset: Int
  
    """
    Specifies the field names to sort the results by in ascending or descending order.
    """
    orderBy: [ AssetContainerEdgeSort ]
    
    """
    Global filter is applied to each collection in all of the search range.
    It is automatically joined with other arguments in each search level by 'AND' conjunction.
    """
    globalFilter: GlobalFilter
    
    
    """
    Provides advanced search via multiple operators in a single search level.
    It is automatically joined with other arguments in the same search level by 'AND' conjunction.
    """
    filter: AssetContainerEdgeFilter): [AssetContainerEdge]
      @cost(complexity: 0, multipliers: ["limit"])
  

  "Default items = 100, use limit filter to adjust"
  assetApplicationEdges(
    """
    Specifies how many elements should be at most included in the result.
    """
    limit: Int = 100
    """
    Specifies how many elements from the result shall be skipped.
    If limit is not specified, this argument is ignored.
    """
    offset: Int
  
    """
    Specifies the field names to sort the results by in ascending or descending order.
    """
    orderBy: [ AssetApplicationEdgeSort ]
    
    """
    Global filter is applied to each collection in all of the search range.
    It is automatically joined with other arguments in each search level by 'AND' conjunction.
    """
    globalFilter: GlobalFilter
    
    
    """
    Provides advanced search via multiple operators in a single search level.
    It is automatically joined with other arguments in the same search level by 'AND' conjunction.
    """
    filter: AssetApplicationEdgeFilter): [AssetApplicationEdge]
      @cost(complexity: 0, multipliers: ["limit"])
  

  "Default items = 100, use limit filter to adjust"
  assetDatabaseEdges(
    """
    Specifies how many elements should be at most included in the result.
    """
    limit: Int = 100
    """
    Specifies how many elements from the result shall be skipped.
    If limit is not specified, this argument is ignored.
    """
    offset: Int
  
    """
    Specifies the field names to sort the results by in ascending or descending order.
    """
    orderBy: [ AssetDatabaseEdgeSort ]
    
    """
    Global filter is applied to each collection in all of the search range.
    It is automatically joined with other arguments in each search level by 'AND' conjunction.
    """
    globalFilter: GlobalFilter
    
    
    """
    Provides advanced search via multiple operators in a single search level.
    It is automatically joined with other arguments in the same search level by 'AND' conjunction.
    """
    filter: AssetDatabaseEdgeFilter): [AssetDatabaseEdge]
      @cost(complexity: 0, multipliers: ["limit"])
  

  "Default items = 100, use limit filter to adjust"
  assetGeolocationEdges(
    """
    Specifies how many elements should be at most included in the result.
    """
    limit: Int = 100
    """
    Specifies how many elements from the result shall be skipped.
    If limit is not specified, this argument is ignored.
    """
    offset: Int
  
    """
    Specifies the field names to sort the results by in ascending or descending order.
    """
    orderBy: [ AssetGeolocationEdgeSort ]
    
    """
    Global filter is applied to each collection in all of the search range.
    It is automatically joined with other arguments in each search level by 'AND' conjunction.
    """
    globalFilter: GlobalFilter
    
    
    """
    Provides advanced search via multiple operators in a single search level.
    It is automatically joined with other arguments in the same search level by 'AND' conjunction.
    """
    filter: AssetGeolocationEdgeFilter): [AssetGeolocationEdge]
      @cost(complexity: 0, multipliers: ["limit"])
  

  "Default items = 100, use limit filter to adjust"
  applicationPortEdges(
    """
    Specifies how many elements should be at most included in the result.
    """
    limit: Int = 100
    """
    Specifies how many elements from the result shall be skipped.
    If limit is not specified, this argument is ignored.
    """
    offset: Int
  
    """
    Specifies the field names to sort the results by in ascending or descending order.
    """
    orderBy: [ ApplicationPortEdgeSort ]
    
    """
    Global filter is applied to each collection in all of the search range.
    It is automatically joined with other arguments in each search level by 'AND' conjunction.
    """
    globalFilter: GlobalFilter
    
    
    """
    Provides advanced search via multiple operators in a single search level.
    It is automatically joined with other arguments in the same search level by 'AND' conjunction.
    """
    filter: ApplicationPortEdgeFilter): [ApplicationPortEdge]
      @cost(complexity: 0, multipliers: ["limit"])
  

  "Default items = 100, use limit filter to adjust"
  accountApplicationEdges(
    """
    Specifies how many elements should be at most included in the result.
    """
    limit: Int = 100
    """
    Specifies how many elements from the result shall be skipped.
    If limit is not specified, this argument is ignored.
    """
    offset: Int
  
    """
    Specifies the field names to sort the results by in ascending or descending order.
    """
    orderBy: [ AccountApplicationEdgeSort ]
    
    """
    Global filter is applied to each collection in all of the search range.
    It is automatically joined with other arguments in each search level by 'AND' conjunction.
    """
    globalFilter: GlobalFilter
    
    
    """
    Provides advanced search via multiple operators in a single search level.
    It is automatically joined with other arguments in the same search level by 'AND' conjunction.
    """
    filter: AccountApplicationEdgeFilter): [AccountApplicationEdge]
      @cost(complexity: 0, multipliers: ["limit"])
  

  "Default items = 100, use limit filter to adjust"
  applicationIpAddrEdges(
    """
    Specifies how many elements should be at most included in the result.
    """
    limit: Int = 100
    """
    Specifies how many elements from the result shall be skipped.
    If limit is not specified, this argument is ignored.
    """
    offset: Int
  
    """
    Specifies the field names to sort the results by in ascending or descending order.
    """
    orderBy: [ ApplicationIpAddrEdgeSort ]
    
    """
    Global filter is applied to each collection in all of the search range.
    It is automatically joined with other arguments in each search level by 'AND' conjunction.
    """
    globalFilter: GlobalFilter
    
    
    """
    Provides advanced search via multiple operators in a single search level.
    It is automatically joined with other arguments in the same search level by 'AND' conjunction.
    """
    filter: ApplicationIpAddrEdgeFilter): [ApplicationIpAddrEdge]
      @cost(complexity: 0, multipliers: ["limit"])
  

  "Default items = 100, use limit filter to adjust"
  businessprocessApplicationEdges(
    """
    Specifies how many elements should be at most included in the result.
    """
    limit: Int = 100
    """
    Specifies how many elements from the result shall be skipped.
    If limit is not specified, this argument is ignored.
    """
    offset: Int
  
    """
    Specifies the field names to sort the results by in ascending or descending order.
    """
    orderBy: [ BusinessprocessApplicationEdgeSort ]
    
    """
    Global filter is applied to each collection in all of the search range.
    It is automatically joined with other arguments in each search level by 'AND' conjunction.
    """
    globalFilter: GlobalFilter
    
    
    """
    Provides advanced search via multiple operators in a single search level.
    It is automatically joined with other arguments in the same search level by 'AND' conjunction.
    """
    filter: BusinessprocessApplicationEdgeFilter): [BusinessprocessApplicationEdge]
      @cost(complexity: 0, multipliers: ["limit"])
  

  "Default items = 100, use limit filter to adjust"
  businessprocessAccountEdges(
    """
    Specifies how many elements should be at most included in the result.
    """
    limit: Int = 100
    """
    Specifies how many elements from the result shall be skipped.
    If limit is not specified, this argument is ignored.
    """
    offset: Int
  
    """
    Specifies the field names to sort the results by in ascending or descending order.
    """
    orderBy: [ BusinessprocessAccountEdgeSort ]
    
    """
    Global filter is applied to each collection in all of the search range.
    It is automatically joined with other arguments in each search level by 'AND' conjunction.
    """
    globalFilter: GlobalFilter
    
    
    """
    Provides advanced search via multiple operators in a single search level.
    It is automatically joined with other arguments in the same search level by 'AND' conjunction.
    """
    filter: BusinessprocessAccountEdgeFilter): [BusinessprocessAccountEdge]
      @cost(complexity: 0, multipliers: ["limit"])
  

  "Default items = 100, use limit filter to adjust"
  applicationDatabaseEdges(
    """
    Specifies how many elements should be at most included in the result.
    """
    limit: Int = 100
    """
    Specifies how many elements from the result shall be skipped.
    If limit is not specified, this argument is ignored.
    """
    offset: Int
  
    """
    Specifies the field names to sort the results by in ascending or descending order.
    """
    orderBy: [ ApplicationDatabaseEdgeSort ]
    
    """
    Global filter is applied to each collection in all of the search range.
    It is automatically joined with other arguments in each search level by 'AND' conjunction.
    """
    globalFilter: GlobalFilter
    
    
    """
    Provides advanced search via multiple operators in a single search level.
    It is automatically joined with other arguments in the same search level by 'AND' conjunction.
    """
    filter: ApplicationDatabaseEdgeFilter): [ApplicationDatabaseEdge]
      @cost(complexity: 0, multipliers: ["limit"])
  

  "Default items = 100, use limit filter to adjust"
  applicationVulnerabilityEdges(
    """
    Specifies how many elements should be at most included in the result.
    """
    limit: Int = 100
    """
    Specifies how many elements from the result shall be skipped.
    If limit is not specified, this argument is ignored.
    """
    offset: Int
  
    """
    Specifies the field names to sort the results by in ascending or descending order.
    """
    orderBy: [ ApplicationVulnerabilityEdgeSort ]
    
    """
    Global filter is applied to each collection in all of the search range.
    It is automatically joined with other arguments in each search level by 'AND' conjunction.
    """
    globalFilter: GlobalFilter
    
    
    """
    Provides advanced search via multiple operators in a single search level.
    It is automatically joined with other arguments in the same search level by 'AND' conjunction.
    """
    filter: ApplicationVulnerabilityEdgeFilter): [ApplicationVulnerabilityEdge]
      @cost(complexity: 0, multipliers: ["limit"])
  

  "Default items = 100, use limit filter to adjust"
  databaseIpAddrEdges(
    """
    Specifies how many elements should be at most included in the result.
    """
    limit: Int = 100
    """
    Specifies how many elements from the result shall be skipped.
    If limit is not specified, this argument is ignored.
    """
    offset: Int
  
    """
    Specifies the field names to sort the results by in ascending or descending order.
    """
    orderBy: [ DatabaseIpAddrEdgeSort ]
    
    """
    Global filter is applied to each collection in all of the search range.
    It is automatically joined with other arguments in each search level by 'AND' conjunction.
    """
    globalFilter: GlobalFilter
    
    
    """
    Provides advanced search via multiple operators in a single search level.
    It is automatically joined with other arguments in the same search level by 'AND' conjunction.
    """
    filter: DatabaseIpAddrEdgeFilter): [DatabaseIpAddrEdge]
      @cost(complexity: 0, multipliers: ["limit"])
  

  "Default items = 100, use limit filter to adjust"
  databaseVulnerabilityEdges(
    """
    Specifies how many elements should be at most included in the result.
    """
    limit: Int = 100
    """
    Specifies how many elements from the result shall be skipped.
    If limit is not specified, this argument is ignored.
    """
    offset: Int
  
    """
    Specifies the field names to sort the results by in ascending or descending order.
    """
    orderBy: [ DatabaseVulnerabilityEdgeSort ]
    
    """
    Global filter is applied to each collection in all of the search range.
    It is automatically joined with other arguments in each search level by 'AND' conjunction.
    """
    globalFilter: GlobalFilter
    
    
    """
    Provides advanced search via multiple operators in a single search level.
    It is automatically joined with other arguments in the same search level by 'AND' conjunction.
    """
    filter: DatabaseVulnerabilityEdgeFilter): [DatabaseVulnerabilityEdge]
      @cost(complexity: 0, multipliers: ["limit"])
  

  "Default items = 100, use limit filter to adjust"
  ipAddrContainerEdges(
    """
    Specifies how many elements should be at most included in the result.
    """
    limit: Int = 100
    """
    Specifies how many elements from the result shall be skipped.
    If limit is not specified, this argument is ignored.
    """
    offset: Int
  
    """
    Specifies the field names to sort the results by in ascending or descending order.
    """
    orderBy: [ IpAddrContainerEdgeSort ]
    
    """
    Global filter is applied to each collection in all of the search range.
    It is automatically joined with other arguments in each search level by 'AND' conjunction.
    """
    globalFilter: GlobalFilter
    
    
    """
    Provides advanced search via multiple operators in a single search level.
    It is automatically joined with other arguments in the same search level by 'AND' conjunction.
    """
    filter: IpAddrContainerEdgeFilter): [IpAddrContainerEdge]
      @cost(complexity: 0, multipliers: ["limit"])
  

  "Default items = 100, use limit filter to adjust"
  ipAddrMacAddrEdges(
    """
    Specifies how many elements should be at most included in the result.
    """
    limit: Int = 100
    """
    Specifies how many elements from the result shall be skipped.
    If limit is not specified, this argument is ignored.
    """
    offset: Int
  
    """
    Specifies the field names to sort the results by in ascending or descending order.
    """
    orderBy: [ IpAddrMacAddrEdgeSort ]
    
    """
    Global filter is applied to each collection in all of the search range.
    It is automatically joined with other arguments in each search level by 'AND' conjunction.
    """
    globalFilter: GlobalFilter
    
    
    """
    Provides advanced search via multiple operators in a single search level.
    It is automatically joined with other arguments in the same search level by 'AND' conjunction.
    """
    filter: IpAddrMacAddrEdgeFilter): [IpAddrMacAddrEdge]
      @cost(complexity: 0, multipliers: ["limit"])
  

  "Default items = 100, use limit filter to adjust"
  ipAddrHostnameEdges(
    """
    Specifies how many elements should be at most included in the result.
    """
    limit: Int = 100
    """
    Specifies how many elements from the result shall be skipped.
    If limit is not specified, this argument is ignored.
    """
    offset: Int
  
    """
    Specifies the field names to sort the results by in ascending or descending order.
    """
    orderBy: [ IpAddrHostnameEdgeSort ]
    
    """
    Global filter is applied to each collection in all of the search range.
    It is automatically joined with other arguments in each search level by 'AND' conjunction.
    """
    globalFilter: GlobalFilter
    
    
    """
    Provides advanced search via multiple operators in a single search level.
    It is automatically joined with other arguments in the same search level by 'AND' conjunction.
    """
    filter: IpAddrHostnameEdgeFilter): [IpAddrHostnameEdge]
      @cost(complexity: 0, multipliers: ["limit"])
  

  "Default items = 100, use limit filter to adjust"
  ipAddrVulnerabilityEdges(
    """
    Specifies how many elements should be at most included in the result.
    """
    limit: Int = 100
    """
    Specifies how many elements from the result shall be skipped.
    If limit is not specified, this argument is ignored.
    """
    offset: Int
  
    """
    Specifies the field names to sort the results by in ascending or descending order.
    """
    orderBy: [ IpAddrVulnerabilityEdgeSort ]
    
    """
    Global filter is applied to each collection in all of the search range.
    It is automatically joined with other arguments in each search level by 'AND' conjunction.
    """
    globalFilter: GlobalFilter
    
    
    """
    Provides advanced search via multiple operators in a single search level.
    It is automatically joined with other arguments in the same search level by 'AND' conjunction.
    """
    filter: IpAddrVulnerabilityEdgeFilter): [IpAddrVulnerabilityEdge]
      @cost(complexity: 0, multipliers: ["limit"])
  

  "Default items = 100, use limit filter to adjust"
  ipAddrGeolocationEdges(
    """
    Specifies how many elements should be at most included in the result.
    """
    limit: Int = 100
    """
    Specifies how many elements from the result shall be skipped.
    If limit is not specified, this argument is ignored.
    """
    offset: Int
  
    """
    Specifies the field names to sort the results by in ascending or descending order.
    """
    orderBy: [ IpAddrGeolocationEdgeSort ]
    
    """
    Global filter is applied to each collection in all of the search range.
    It is automatically joined with other arguments in each search level by 'AND' conjunction.
    """
    globalFilter: GlobalFilter
    
    
    """
    Provides advanced search via multiple operators in a single search level.
    It is automatically joined with other arguments in the same search level by 'AND' conjunction.
    """
    filter: IpAddrGeolocationEdgeFilter): [IpAddrGeolocationEdge]
      @cost(complexity: 0, multipliers: ["limit"])
  

  "Default items = 100, use limit filter to adjust"
  ipAddrPortEdges(
    """
    Specifies how many elements should be at most included in the result.
    """
    limit: Int = 100
    """
    Specifies how many elements from the result shall be skipped.
    If limit is not specified, this argument is ignored.
    """
    offset: Int
  
    """
    Specifies the field names to sort the results by in ascending or descending order.
    """
    orderBy: [ IpAddrPortEdgeSort ]
    
    """
    Global filter is applied to each collection in all of the search range.
    It is automatically joined with other arguments in each search level by 'AND' conjunction.
    """
    globalFilter: GlobalFilter
    
    
    """
    Provides advanced search via multiple operators in a single search level.
    It is automatically joined with other arguments in the same search level by 'AND' conjunction.
    """
    filter: IpAddrPortEdgeFilter): [IpAddrPortEdge]
      @cost(complexity: 0, multipliers: ["limit"])
  

  "Default items = 100, use limit filter to adjust"
  userAccountEdges(
    """
    Specifies how many elements should be at most included in the result.
    """
    limit: Int = 100
    """
    Specifies how many elements from the result shall be skipped.
    If limit is not specified, this argument is ignored.
    """
    offset: Int
  
    """
    Specifies the field names to sort the results by in ascending or descending order.
    """
    orderBy: [ UserAccountEdgeSort ]
    
    """
    Global filter is applied to each collection in all of the search range.
    It is automatically joined with other arguments in each search level by 'AND' conjunction.
    """
    globalFilter: GlobalFilter
    
    
    """
    Provides advanced search via multiple operators in a single search level.
    It is automatically joined with other arguments in the same search level by 'AND' conjunction.
    """
    filter: UserAccountEdgeFilter): [UserAccountEdge]
      @cost(complexity: 0, multipliers: ["limit"])
  

  "Default items = 100, use limit filter to adjust"
  accountDatabaseEdges(
    """
    Specifies how many elements should be at most included in the result.
    """
    limit: Int = 100
    """
    Specifies how many elements from the result shall be skipped.
    If limit is not specified, this argument is ignored.
    """
    offset: Int
  
    """
    Specifies the field names to sort the results by in ascending or descending order.
    """
    orderBy: [ AccountDatabaseEdgeSort ]
    
    """
    Global filter is applied to each collection in all of the search range.
    It is automatically joined with other arguments in each search level by 'AND' conjunction.
    """
    globalFilter: GlobalFilter
    
    
    """
    Provides advanced search via multiple operators in a single search level.
    It is automatically joined with other arguments in the same search level by 'AND' conjunction.
    """
    filter: AccountDatabaseEdgeFilter): [AccountDatabaseEdge]
      @cost(complexity: 0, multipliers: ["limit"])
  

  "Default items = 100, use limit filter to adjust"
  accountHostnameEdges(
    """
    Specifies how many elements should be at most included in the result.
    """
    limit: Int = 100
    """
    Specifies how many elements from the result shall be skipped.
    If limit is not specified, this argument is ignored.
    """
    offset: Int
  
    """
    Specifies the field names to sort the results by in ascending or descending order.
    """
    orderBy: [ AccountHostnameEdgeSort ]
    
    """
    Global filter is applied to each collection in all of the search range.
    It is automatically joined with other arguments in each search level by 'AND' conjunction.
    """
    globalFilter: GlobalFilter
    
    
    """
    Provides advanced search via multiple operators in a single search level.
    It is automatically joined with other arguments in the same search level by 'AND' conjunction.
    """
    filter: AccountHostnameEdgeFilter): [AccountHostnameEdge]
      @cost(complexity: 0, multipliers: ["limit"])
  

  "Default items = 100, use limit filter to adjust"
  accountIpAddrEdges(
    """
    Specifies how many elements should be at most included in the result.
    """
    limit: Int = 100
    """
    Specifies how many elements from the result shall be skipped.
    If limit is not specified, this argument is ignored.
    """
    offset: Int
  
    """
    Specifies the field names to sort the results by in ascending or descending order.
    """
    orderBy: [ AccountIpAddrEdgeSort ]
    
    """
    Global filter is applied to each collection in all of the search range.
    It is automatically joined with other arguments in each search level by 'AND' conjunction.
    """
    globalFilter: GlobalFilter
    
    
    """
    Provides advanced search via multiple operators in a single search level.
    It is automatically joined with other arguments in the same search level by 'AND' conjunction.
    """
    filter: AccountIpAddrEdgeFilter): [AccountIpAddrEdge]
      @cost(complexity: 0, multipliers: ["limit"])
  

  "Default items = 100, use limit filter to adjust"
  unifiedAccountAccountEdges(
    """
    Specifies how many elements should be at most included in the result.
    """
    limit: Int = 100
    """
    Specifies how many elements from the result shall be skipped.
    If limit is not specified, this argument is ignored.
    """
    offset: Int
  
    """
    Specifies the field names to sort the results by in ascending or descending order.
    """
    orderBy: [ UnifiedAccountAccountEdgeSort ]
    
    """
    Global filter is applied to each collection in all of the search range.
    It is automatically joined with other arguments in each search level by 'AND' conjunction.
    """
    globalFilter: GlobalFilter
    
    
    """
    Provides advanced search via multiple operators in a single search level.
    It is automatically joined with other arguments in the same search level by 'AND' conjunction.
    """
    filter: UnifiedAccountAccountEdgeFilter): [UnifiedAccountAccountEdge]
      @cost(complexity: 0, multipliers: ["limit"])
  

  "Default items = 100, use limit filter to adjust"
  unifiedUserUserEdges(
    """
    Specifies how many elements should be at most included in the result.
    """
    limit: Int = 100
    """
    Specifies how many elements from the result shall be skipped.
    If limit is not specified, this argument is ignored.
    """
    offset: Int
  
    """
    Specifies the field names to sort the results by in ascending or descending order.
    """
    orderBy: [ UnifiedUserUserEdgeSort ]
    
    """
    Global filter is applied to each collection in all of the search range.
    It is automatically joined with other arguments in each search level by 'AND' conjunction.
    """
    globalFilter: GlobalFilter
    
    
    """
    Provides advanced search via multiple operators in a single search level.
    It is automatically joined with other arguments in the same search level by 'AND' conjunction.
    """
    filter: UnifiedUserUserEdgeFilter): [UnifiedUserUserEdge]
      @cost(complexity: 0, multipliers: ["limit"])
  

  "Default items = 100, use limit filter to adjust"
  portVulnerabilityEdges(
    """
    Specifies how many elements should be at most included in the result.
    """
    limit: Int = 100
    """
    Specifies how many elements from the result shall be skipped.
    If limit is not specified, this argument is ignored.
    """
    offset: Int
  
    """
    Specifies the field names to sort the results by in ascending or descending order.
    """
    orderBy: [ PortVulnerabilityEdgeSort ]
    
    """
    Global filter is applied to each collection in all of the search range.
    It is automatically joined with other arguments in each search level by 'AND' conjunction.
    """
    globalFilter: GlobalFilter
    
    
    """
    Provides advanced search via multiple operators in a single search level.
    It is automatically joined with other arguments in the same search level by 'AND' conjunction.
    """
    filter: PortVulnerabilityEdgeFilter): [PortVulnerabilityEdge]
      @cost(complexity: 0, multipliers: ["limit"])
  

  "Default items = 100, use limit filter to adjust"
  tagAssetEdges(
    """
    Specifies how many elements should be at most included in the result.
    """
    limit: Int = 100
    """
    Specifies how many elements from the result shall be skipped.
    If limit is not specified, this argument is ignored.
    """
    offset: Int
  
    """
    Specifies the field names to sort the results by in ascending or descending order.
    """
    orderBy: [ TagAssetEdgeSort ]
    
    """
    Global filter is applied to each collection in all of the search range.
    It is automatically joined with other arguments in each search level by 'AND' conjunction.
    """
    globalFilter: GlobalFilter
    
    
    """
    Provides advanced search via multiple operators in a single search level.
    It is automatically joined with other arguments in the same search level by 'AND' conjunction.
    """
    filter: TagAssetEdgeFilter): [TagAssetEdge]
      @cost(complexity: 0, multipliers: ["limit"])
  

  "Default items = 100, use limit filter to adjust"
  tagContainerEdges(
    """
    Specifies how many elements should be at most included in the result.
    """
    limit: Int = 100
    """
    Specifies how many elements from the result shall be skipped.
    If limit is not specified, this argument is ignored.
    """
    offset: Int
  
    """
    Specifies the field names to sort the results by in ascending or descending order.
    """
    orderBy: [ TagContainerEdgeSort ]
    
    """
    Global filter is applied to each collection in all of the search range.
    It is automatically joined with other arguments in each search level by 'AND' conjunction.
    """
    globalFilter: GlobalFilter
    
    
    """
    Provides advanced search via multiple operators in a single search level.
    It is automatically joined with other arguments in the same search level by 'AND' conjunction.
    """
    filter: TagContainerEdgeFilter): [TagContainerEdge]
      @cost(complexity: 0, multipliers: ["limit"])
  

  "Default items = 100, use limit filter to adjust"
  tagIpAddrEdges(
    """
    Specifies how many elements should be at most included in the result.
    """
    limit: Int = 100
    """
    Specifies how many elements from the result shall be skipped.
    If limit is not specified, this argument is ignored.
    """
    offset: Int
  
    """
    Specifies the field names to sort the results by in ascending or descending order.
    """
    orderBy: [ TagIpAddrEdgeSort ]
    
    """
    Global filter is applied to each collection in all of the search range.
    It is automatically joined with other arguments in each search level by 'AND' conjunction.
    """
    globalFilter: GlobalFilter
    
    
    """
    Provides advanced search via multiple operators in a single search level.
    It is automatically joined with other arguments in the same search level by 'AND' conjunction.
    """
    filter: TagIpAddrEdgeFilter): [TagIpAddrEdge]
      @cost(complexity: 0, multipliers: ["limit"])
  

  "Default items = 100, use limit filter to adjust"
  tagUnifiedUserEdges(
    """
    Specifies how many elements should be at most included in the result.
    """
    limit: Int = 100
    """
    Specifies how many elements from the result shall be skipped.
    If limit is not specified, this argument is ignored.
    """
    offset: Int
  
    """
    Specifies the field names to sort the results by in ascending or descending order.
    """
    orderBy: [ TagUnifiedUserEdgeSort ]
    
    """
    Global filter is applied to each collection in all of the search range.
    It is automatically joined with other arguments in each search level by 'AND' conjunction.
    """
    globalFilter: GlobalFilter
    
    
    """
    Provides advanced search via multiple operators in a single search level.
    It is automatically joined with other arguments in the same search level by 'AND' conjunction.
    """
    filter: TagUnifiedUserEdgeFilter): [TagUnifiedUserEdge]
      @cost(complexity: 0, multipliers: ["limit"])
  

  "Default items = 100, use limit filter to adjust"
  tagUserEdges(
    """
    Specifies how many elements should be at most included in the result.
    """
    limit: Int = 100
    """
    Specifies how many elements from the result shall be skipped.
    If limit is not specified, this argument is ignored.
    """
    offset: Int
  
    """
    Specifies the field names to sort the results by in ascending or descending order.
    """
    orderBy: [ TagUserEdgeSort ]
    
    """
    Global filter is applied to each collection in all of the search range.
    It is automatically joined with other arguments in each search level by 'AND' conjunction.
    """
    globalFilter: GlobalFilter
    
    
    """
    Provides advanced search via multiple operators in a single search level.
    It is automatically joined with other arguments in the same search level by 'AND' conjunction.
    """
    filter: TagUserEdgeFilter): [TagUserEdge]
      @cost(complexity: 0, multipliers: ["limit"])
  

  "Default items = 100, use limit filter to adjust"
  tagUnifiedAccountEdges(
    """
    Specifies how many elements should be at most included in the result.
    """
    limit: Int = 100
    """
    Specifies how many elements from the result shall be skipped.
    If limit is not specified, this argument is ignored.
    """
    offset: Int
  
    """
    Specifies the field names to sort the results by in ascending or descending order.
    """
    orderBy: [ TagUnifiedAccountEdgeSort ]
    
    """
    Global filter is applied to each collection in all of the search range.
    It is automatically joined with other arguments in each search level by 'AND' conjunction.
    """
    globalFilter: GlobalFilter
    
    
    """
    Provides advanced search via multiple operators in a single search level.
    It is automatically joined with other arguments in the same search level by 'AND' conjunction.
    """
    filter: TagUnifiedAccountEdgeFilter): [TagUnifiedAccountEdge]
      @cost(complexity: 0, multipliers: ["limit"])
  

  "Default items = 100, use limit filter to adjust"
  tagAccountEdges(
    """
    Specifies how many elements should be at most included in the result.
    """
    limit: Int = 100
    """
    Specifies how many elements from the result shall be skipped.
    If limit is not specified, this argument is ignored.
    """
    offset: Int
  
    """
    Specifies the field names to sort the results by in ascending or descending order.
    """
    orderBy: [ TagAccountEdgeSort ]
    
    """
    Global filter is applied to each collection in all of the search range.
    It is automatically joined with other arguments in each search level by 'AND' conjunction.
    """
    globalFilter: GlobalFilter
    
    
    """
    Provides advanced search via multiple operators in a single search level.
    It is automatically joined with other arguments in the same search level by 'AND' conjunction.
    """
    filter: TagAccountEdgeFilter): [TagAccountEdge]
      @cost(complexity: 0, multipliers: ["limit"])
  

  "Default items = 100, use limit filter to adjust"
  tagApplicationEdges(
    """
    Specifies how many elements should be at most included in the result.
    """
    limit: Int = 100
    """
    Specifies how many elements from the result shall be skipped.
    If limit is not specified, this argument is ignored.
    """
    offset: Int
  
    """
    Specifies the field names to sort the results by in ascending or descending order.
    """
    orderBy: [ TagApplicationEdgeSort ]
    
    """
    Global filter is applied to each collection in all of the search range.
    It is automatically joined with other arguments in each search level by 'AND' conjunction.
    """
    globalFilter: GlobalFilter
    
    
    """
    Provides advanced search via multiple operators in a single search level.
    It is automatically joined with other arguments in the same search level by 'AND' conjunction.
    """
    filter: TagApplicationEdgeFilter): [TagApplicationEdge]
      @cost(complexity: 0, multipliers: ["limit"])
  

  "Default items = 100, use limit filter to adjust"
  tagHostnameEdges(
    """
    Specifies how many elements should be at most included in the result.
    """
    limit: Int = 100
    """
    Specifies how many elements from the result shall be skipped.
    If limit is not specified, this argument is ignored.
    """
    offset: Int
  
    """
    Specifies the field names to sort the results by in ascending or descending order.
    """
    orderBy: [ TagHostnameEdgeSort ]
    
    """
    Global filter is applied to each collection in all of the search range.
    It is automatically joined with other arguments in each search level by 'AND' conjunction.
    """
    globalFilter: GlobalFilter
    
    
    """
    Provides advanced search via multiple operators in a single search level.
    It is automatically joined with other arguments in the same search level by 'AND' conjunction.
    """
    filter: TagHostnameEdgeFilter): [TagHostnameEdge]
      @cost(complexity: 0, multipliers: ["limit"])
  

  "Default items = 100, use limit filter to adjust"
  tagBusinessprocessEdges(
    """
    Specifies how many elements should be at most included in the result.
    """
    limit: Int = 100
    """
    Specifies how many elements from the result shall be skipped.
    If limit is not specified, this argument is ignored.
    """
    offset: Int
  
    """
    Specifies the field names to sort the results by in ascending or descending order.
    """
    orderBy: [ TagBusinessprocessEdgeSort ]
    
    """
    Global filter is applied to each collection in all of the search range.
    It is automatically joined with other arguments in each search level by 'AND' conjunction.
    """
    globalFilter: GlobalFilter
    
    
    """
    Provides advanced search via multiple operators in a single search level.
    It is automatically joined with other arguments in the same search level by 'AND' conjunction.
    """
    filter: TagBusinessprocessEdgeFilter): [TagBusinessprocessEdge]
      @cost(complexity: 0, multipliers: ["limit"])
  

  "Default items = 100, use limit filter to adjust"
  tagDatabaseEdges(
    """
    Specifies how many elements should be at most included in the result.
    """
    limit: Int = 100
    """
    Specifies how many elements from the result shall be skipped.
    If limit is not specified, this argument is ignored.
    """
    offset: Int
  
    """
    Specifies the field names to sort the results by in ascending or descending order.
    """
    orderBy: [ TagDatabaseEdgeSort ]
    
    """
    Global filter is applied to each collection in all of the search range.
    It is automatically joined with other arguments in each search level by 'AND' conjunction.
    """
    globalFilter: GlobalFilter
    
    
    """
    Provides advanced search via multiple operators in a single search level.
    It is automatically joined with other arguments in the same search level by 'AND' conjunction.
    """
    filter: TagDatabaseEdgeFilter): [TagDatabaseEdge]
      @cost(complexity: 0, multipliers: ["limit"])
  

  "Default items = 100, use limit filter to adjust"
  tagMacAddrEdges(
    """
    Specifies how many elements should be at most included in the result.
    """
    limit: Int = 100
    """
    Specifies how many elements from the result shall be skipped.
    If limit is not specified, this argument is ignored.
    """
    offset: Int
  
    """
    Specifies the field names to sort the results by in ascending or descending order.
    """
    orderBy: [ TagMacAddrEdgeSort ]
    
    """
    Global filter is applied to each collection in all of the search range.
    It is automatically joined with other arguments in each search level by 'AND' conjunction.
    """
    globalFilter: GlobalFilter
    
    
    """
    Provides advanced search via multiple operators in a single search level.
    It is automatically joined with other arguments in the same search level by 'AND' conjunction.
    """
    filter: TagMacAddrEdgeFilter): [TagMacAddrEdge]
      @cost(complexity: 0, multipliers: ["limit"])
  

  "Default items = 100, use limit filter to adjust"
  tagPortEdges(
    """
    Specifies how many elements should be at most included in the result.
    """
    limit: Int = 100
    """
    Specifies how many elements from the result shall be skipped.
    If limit is not specified, this argument is ignored.
    """
    offset: Int
  
    """
    Specifies the field names to sort the results by in ascending or descending order.
    """
    orderBy: [ TagPortEdgeSort ]
    
    """
    Global filter is applied to each collection in all of the search range.
    It is automatically joined with other arguments in each search level by 'AND' conjunction.
    """
    globalFilter: GlobalFilter
    
    
    """
    Provides advanced search via multiple operators in a single search level.
    It is automatically joined with other arguments in the same search level by 'AND' conjunction.
    """
    filter: TagPortEdgeFilter): [TagPortEdge]
      @cost(complexity: 0, multipliers: ["limit"])
  

  "Default items = 100, use limit filter to adjust"
  tagVulnerabilityEdges(
    """
    Specifies how many elements should be at most included in the result.
    """
    limit: Int = 100
    """
    Specifies how many elements from the result shall be skipped.
    If limit is not specified, this argument is ignored.
    """
    offset: Int
  
    """
    Specifies the field names to sort the results by in ascending or descending order.
    """
    orderBy: [ TagVulnerabilityEdgeSort ]
    
    """
    Global filter is applied to each collection in all of the search range.
    It is automatically joined with other arguments in each search level by 'AND' conjunction.
    """
    globalFilter: GlobalFilter
    
    
    """
    Provides advanced search via multiple operators in a single search level.
    It is automatically joined with other arguments in the same search level by 'AND' conjunction.
    """
    filter: TagVulnerabilityEdgeFilter): [TagVulnerabilityEdge]
      @cost(complexity: 0, multipliers: ["limit"])
  

  "Default items = 100, use limit filter to adjust"
  tagGeolocationEdges(
    """
    Specifies how many elements should be at most included in the result.
    """
    limit: Int = 100
    """
    Specifies how many elements from the result shall be skipped.
    If limit is not specified, this argument is ignored.
    """
    offset: Int
  
    """
    Specifies the field names to sort the results by in ascending or descending order.
    """
    orderBy: [ TagGeolocationEdgeSort ]
    
    """
    Global filter is applied to each collection in all of the search range.
    It is automatically joined with other arguments in each search level by 'AND' conjunction.
    """
    globalFilter: GlobalFilter
    
    
    """
    Provides advanced search via multiple operators in a single search level.
    It is automatically joined with other arguments in the same search level by 'AND' conjunction.
    """
    filter: TagGeolocationEdgeFilter): [TagGeolocationEdge]
      @cost(complexity: 0, multipliers: ["limit"])
  
}

scalar Date
scalar JSON
enum SortDirection { asc, desc }
type Asset {
  key: ID! @cost
  _id: ID! @cost
  customProperties(filter: CustomPropertiesFilter): JSON! @cost
  name: String @cost
  business_value: Float @cost
  risk: Float @cost
  description: String @cost
  asset_type: String @cost
  _created: Date @cost
  _modified: Date @cost
  _deleted: Date @cost
  tag: [String] @cost
  untag: [String] @cost
  source: String @cost
  "Default nested items = 10, use limit filter to adjust"
  vulnerabilityEdges(filter: AssetVulnerabilityEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [AssetVulnerabilityEdgeSort]): [AssetVulnerabilityEdge]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  vulnerabilities(filter: VulnerabilityFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [VulnerabilitySort]): [Vulnerability]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  ipAddrEdges(filter: AssetIpAddrEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [AssetIpAddrEdgeSort]): [AssetIpAddrEdge]!
    @cost(complexity: 1)
  "Default nested items = 10, use limit filter to adjust"
  ipAddrs(filter: IpAddrFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [IpAddrSort]): [IpAddr]!
    @cost(complexity: 1)
  "Default nested items = 10, use limit filter to adjust"
  macAddrEdges(filter: AssetMacAddrEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [AssetMacAddrEdgeSort]): [AssetMacAddrEdge]!
    @cost(complexity: 1)
  "Default nested items = 10, use limit filter to adjust"
  macAddrs(filter: MacAddrFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [MacAddrSort]): [MacAddr]!
    @cost(complexity: 1)
  "Default nested items = 10, use limit filter to adjust"
  hostnameEdges(filter: AssetHostnameEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [AssetHostnameEdgeSort]): [AssetHostnameEdge]!
    @cost(complexity: 1)
  "Default nested items = 10, use limit filter to adjust"
  hostnames(filter: HostnameFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [HostnameSort]): [Hostname]!
    @cost(complexity: 1)
  "Default nested items = 10, use limit filter to adjust"
  accountEdges(filter: AssetAccountEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [AssetAccountEdgeSort]): [AssetAccountEdge]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  accounts(filter: AccountFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [AccountSort]): [Account]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  containerEdges(filter: AssetContainerEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [AssetContainerEdgeSort]): [AssetContainerEdge]!
    @cost(complexity: 1)
  "Default nested items = 10, use limit filter to adjust"
  containers(filter: ContainerFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [ContainerSort]): [Container]!
    @cost(complexity: 1)
  "Default nested items = 10, use limit filter to adjust"
  applicationEdges(filter: AssetApplicationEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [AssetApplicationEdgeSort]): [AssetApplicationEdge]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  applications(filter: ApplicationFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [ApplicationSort]): [Application]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  databaseEdges(filter: AssetDatabaseEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [AssetDatabaseEdgeSort]): [AssetDatabaseEdge]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  databases(filter: DatabaseFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [DatabaseSort]): [Database]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  geolocationEdges(filter: AssetGeolocationEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [AssetGeolocationEdgeSort]): [AssetGeolocationEdge]!
    @cost(complexity: 1)
  "Default nested items = 10, use limit filter to adjust"
  geolocations(filter: GeolocationFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [GeolocationSort]): [Geolocation]!
    @cost(complexity: 1)
  "Default nested items = 10, use limit filter to adjust"
  tagEdges(filter: TagAssetEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [TagAssetEdgeSort]): [TagAssetEdge]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  tags(filter: TagFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [TagSort]): [Tag]!
    @cost(complexity: 0, multipliers: ["limit"])
}
input AssetSort {
key: SortDirection
name: SortDirection
business_value: SortDirection
risk: SortDirection
_created: SortDirection
_modified: SortDirection
_deleted: SortDirection
}

type Container {
  key: ID! @cost
  _id: ID! @cost
  customProperties(filter: CustomPropertiesFilter): JSON! @cost
  name: String @cost
  image: String @cost
  _created: Date @cost
  _modified: Date @cost
  _deleted: Date @cost
  tag: [String] @cost
  untag: [String] @cost
  source: String @cost
  "Default nested items = 10, use limit filter to adjust"
  assetEdges(filter: AssetContainerEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [AssetContainerEdgeSort]): [AssetContainerEdge]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  assets(filter: AssetFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [AssetSort]): [Asset]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  ipAddrEdges(filter: IpAddrContainerEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [IpAddrContainerEdgeSort]): [IpAddrContainerEdge]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  ipAddrs(filter: IpAddrFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [IpAddrSort]): [IpAddr]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  tagEdges(filter: TagContainerEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [TagContainerEdgeSort]): [TagContainerEdge]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  tags(filter: TagFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [TagSort]): [Tag]!
    @cost(complexity: 0, multipliers: ["limit"])
}
input ContainerSort {
key: SortDirection
_created: SortDirection
_modified: SortDirection
_deleted: SortDirection
}

type IpAddr {
  key: ID! @cost
  _id: ID! @cost
  customProperties(filter: CustomPropertiesFilter): JSON! @cost
  _created: Date @cost
  _modified: Date @cost
  _deleted: Date @cost
  tag: [String] @cost
  untag: [String] @cost
  "Default nested items = 10, use limit filter to adjust"
  assetEdges(filter: AssetIpAddrEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [AssetIpAddrEdgeSort]): [AssetIpAddrEdge]!
    @cost(complexity: 1)
  "Default nested items = 10, use limit filter to adjust"
  assets(filter: AssetFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [AssetSort]): [Asset]!
    @cost(complexity: 1)
  "Default nested items = 10, use limit filter to adjust"
  applicationEdges(filter: ApplicationIpAddrEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [ApplicationIpAddrEdgeSort]): [ApplicationIpAddrEdge]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  applications(filter: ApplicationFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [ApplicationSort]): [Application]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  databaseEdges(filter: DatabaseIpAddrEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [DatabaseIpAddrEdgeSort]): [DatabaseIpAddrEdge]!
    @cost(complexity: 1)
  "Default nested items = 10, use limit filter to adjust"
  databases(filter: DatabaseFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [DatabaseSort]): [Database]!
    @cost(complexity: 1)
  "Default nested items = 10, use limit filter to adjust"
  containerEdges(filter: IpAddrContainerEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [IpAddrContainerEdgeSort]): [IpAddrContainerEdge]!
    @cost(complexity: 1)
  "Default nested items = 10, use limit filter to adjust"
  containers(filter: ContainerFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [ContainerSort]): [Container]!
    @cost(complexity: 1)
  "Default nested items = 10, use limit filter to adjust"
  macAddrEdges(filter: IpAddrMacAddrEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [IpAddrMacAddrEdgeSort]): [IpAddrMacAddrEdge]!
    @cost(complexity: 1)
  "Default nested items = 10, use limit filter to adjust"
  macAddrs(filter: MacAddrFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [MacAddrSort]): [MacAddr]!
    @cost(complexity: 1)
  "Default nested items = 10, use limit filter to adjust"
  hostnameEdges(filter: IpAddrHostnameEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [IpAddrHostnameEdgeSort]): [IpAddrHostnameEdge]!
    @cost(complexity: 1)
  "Default nested items = 10, use limit filter to adjust"
  hostnames(filter: HostnameFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [HostnameSort]): [Hostname]!
    @cost(complexity: 1)
  "Default nested items = 10, use limit filter to adjust"
  vulnerabilityEdges(filter: IpAddrVulnerabilityEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [IpAddrVulnerabilityEdgeSort]): [IpAddrVulnerabilityEdge]!
    @cost(complexity: 1)
  "Default nested items = 10, use limit filter to adjust"
  vulnerabilities(filter: VulnerabilityFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [VulnerabilitySort]): [Vulnerability]!
    @cost(complexity: 1)
  "Default nested items = 10, use limit filter to adjust"
  geolocationEdges(filter: IpAddrGeolocationEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [IpAddrGeolocationEdgeSort]): [IpAddrGeolocationEdge]!
    @cost(complexity: 1)
  "Default nested items = 10, use limit filter to adjust"
  geolocations(filter: GeolocationFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [GeolocationSort]): [Geolocation]!
    @cost(complexity: 1)
  "Default nested items = 10, use limit filter to adjust"
  portEdges(filter: IpAddrPortEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [IpAddrPortEdgeSort]): [IpAddrPortEdge]!
    @cost(complexity: 1)
  "Default nested items = 10, use limit filter to adjust"
  ports(filter: PortFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [PortSort]): [Port]!
    @cost(complexity: 1)
  "Default nested items = 10, use limit filter to adjust"
  accountEdges(filter: AccountIpAddrEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [AccountIpAddrEdgeSort]): [AccountIpAddrEdge]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  accounts(filter: AccountFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [AccountSort]): [Account]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  tagEdges(filter: TagIpAddrEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [TagIpAddrEdgeSort]): [TagIpAddrEdge]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  tags(filter: TagFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [TagSort]): [Tag]!
    @cost(complexity: 0, multipliers: ["limit"])
}
input IpAddrSort {
key: SortDirection
_created: SortDirection
_modified: SortDirection
_deleted: SortDirection
}

type UnifiedUser {
  key: ID! @cost
  _id: ID! @cost
  customProperties(filter: CustomPropertiesFilter): JSON! @cost
  _created: Date @cost
  _modified: Date @cost
  _deleted: Date @cost
  tag: [String] @cost
  untag: [String] @cost
  "Default nested items = 10, use limit filter to adjust"
  userEdges(filter: UnifiedUserUserEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [UnifiedUserUserEdgeSort]): [UnifiedUserUserEdge]!
    @cost(complexity: 1)
  "Default nested items = 10, use limit filter to adjust"
  users(filter: UserFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [UserSort]): [User]!
    @cost(complexity: 1)
  "Default nested items = 10, use limit filter to adjust"
  tagEdges(filter: TagUnifiedUserEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [TagUnifiedUserEdgeSort]): [TagUnifiedUserEdge]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  tags(filter: TagFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [TagSort]): [Tag]!
    @cost(complexity: 0, multipliers: ["limit"])
}
input UnifiedUserSort {
key: SortDirection
_created: SortDirection
_modified: SortDirection
_deleted: SortDirection
}

type User {
  key: ID! @cost
  _id: ID! @cost
  customProperties(filter: CustomPropertiesFilter): JSON! @cost
  username: String @cost
  fullname: String @cost
  job_title: String @cost
  email: String @cost
  description: String @cost
  role: String @cost
  family_name: String @cost
  given_name: String @cost
  upn: String @cost
  user_category: String @cost
  title: String @cost
  employee_id: String @cost
  active: Boolean @cost
  department: String @cost
  modified: Float @cost
  cumulative_score: Float @cost
  current_score: Float @cost
  critical: Float @cost
  high: Float @cost
  medium: Float @cost
  low: Float @cost
  first_occurrence: Float @cost
  last_occurrence: Float @cost
  _created: Date @cost
  _modified: Date @cost
  _deleted: Date @cost
  tag: [String] @cost
  untag: [String] @cost
  source: String @cost
  "Default nested items = 10, use limit filter to adjust"
  accountEdges(filter: UserAccountEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [UserAccountEdgeSort]): [UserAccountEdge]!
    @cost(complexity: 1)
  "Default nested items = 10, use limit filter to adjust"
  accounts(filter: AccountFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [AccountSort]): [Account]!
    @cost(complexity: 1)
  "Default nested items = 10, use limit filter to adjust"
  unifiedUserEdges(filter: UnifiedUserUserEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [UnifiedUserUserEdgeSort]): [UnifiedUserUserEdge]!
    @cost(complexity: 1)
  "Default nested items = 10, use limit filter to adjust"
  unifiedUsers(filter: UnifiedUserFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [UnifiedUserSort]): [UnifiedUser]!
    @cost(complexity: 1)
  "Default nested items = 10, use limit filter to adjust"
  tagEdges(filter: TagUserEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [TagUserEdgeSort]): [TagUserEdge]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  tags(filter: TagFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [TagSort]): [Tag]!
    @cost(complexity: 0, multipliers: ["limit"])
}
input UserSort {
key: SortDirection
fullname: SortDirection
job_title: SortDirection
employee_id: SortDirection
department: SortDirection
cumulative_score: SortDirection
current_score: SortDirection
_created: SortDirection
_modified: SortDirection
_deleted: SortDirection
}

type UnifiedAccount {
  key: ID! @cost
  _id: ID! @cost
  customProperties(filter: CustomPropertiesFilter): JSON! @cost
  name: String @cost
  _created: Date @cost
  _modified: Date @cost
  _deleted: Date @cost
  tag: [String] @cost
  untag: [String] @cost
  "Default nested items = 10, use limit filter to adjust"
  accountEdges(filter: UnifiedAccountAccountEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [UnifiedAccountAccountEdgeSort]): [UnifiedAccountAccountEdge]!
    @cost(complexity: 1)
  "Default nested items = 10, use limit filter to adjust"
  accounts(filter: AccountFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [AccountSort]): [Account]!
    @cost(complexity: 1)
  "Default nested items = 10, use limit filter to adjust"
  tagEdges(filter: TagUnifiedAccountEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [TagUnifiedAccountEdgeSort]): [TagUnifiedAccountEdge]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  tags(filter: TagFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [TagSort]): [Tag]!
    @cost(complexity: 0, multipliers: ["limit"])
}
input UnifiedAccountSort {
key: SortDirection
name: SortDirection
_created: SortDirection
_modified: SortDirection
_deleted: SortDirection
}

type Account {
  key: ID! @cost
  _id: ID! @cost
  customProperties(filter: CustomPropertiesFilter): JSON! @cost
  name: String @cost
  created: Float @cost
  active: Boolean @cost
  compliance_status: Boolean @cost
  modified: Float @cost
  cumulative_score: Float @cost
  current_score: Float @cost
  critical: Float @cost
  high: Float @cost
  medium: Float @cost
  low: Float @cost
  first_occurrence: Float @cost
  last_occurrence: Float @cost
  _created: Date @cost
  _modified: Date @cost
  _deleted: Date @cost
  tag: [String] @cost
  untag: [String] @cost
  source: String @cost
  "Default nested items = 10, use limit filter to adjust"
  assetEdges(filter: AssetAccountEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [AssetAccountEdgeSort]): [AssetAccountEdge]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  assets(filter: AssetFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [AssetSort]): [Asset]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  applicationEdges(filter: AccountApplicationEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [AccountApplicationEdgeSort]): [AccountApplicationEdge]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  applications(filter: ApplicationFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [ApplicationSort]): [Application]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  businessprocessEdges(filter: BusinessprocessAccountEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [BusinessprocessAccountEdgeSort]): [BusinessprocessAccountEdge]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  businessprocesses(filter: BusinessprocessFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [BusinessprocessSort]): [Businessprocess]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  userEdges(filter: UserAccountEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [UserAccountEdgeSort]): [UserAccountEdge]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  users(filter: UserFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [UserSort]): [User]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  databaseEdges(filter: AccountDatabaseEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [AccountDatabaseEdgeSort]): [AccountDatabaseEdge]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  databases(filter: DatabaseFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [DatabaseSort]): [Database]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  hostnameEdges(filter: AccountHostnameEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [AccountHostnameEdgeSort]): [AccountHostnameEdge]!
    @cost(complexity: 1)
  "Default nested items = 10, use limit filter to adjust"
  hostnames(filter: HostnameFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [HostnameSort]): [Hostname]!
    @cost(complexity: 1)
  "Default nested items = 10, use limit filter to adjust"
  ipAddrEdges(filter: AccountIpAddrEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [AccountIpAddrEdgeSort]): [AccountIpAddrEdge]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  ipAddrs(filter: IpAddrFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [IpAddrSort]): [IpAddr]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  unifiedAccountEdges(filter: UnifiedAccountAccountEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [UnifiedAccountAccountEdgeSort]): [UnifiedAccountAccountEdge]!
    @cost(complexity: 1)
  "Default nested items = 10, use limit filter to adjust"
  unifiedAccounts(filter: UnifiedAccountFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [UnifiedAccountSort]): [UnifiedAccount]!
    @cost(complexity: 1)
  "Default nested items = 10, use limit filter to adjust"
  tagEdges(filter: TagAccountEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [TagAccountEdgeSort]): [TagAccountEdge]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  tags(filter: TagFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [TagSort]): [Tag]!
    @cost(complexity: 0, multipliers: ["limit"])
}
input AccountSort {
key: SortDirection
name: SortDirection
cumulative_score: SortDirection
current_score: SortDirection
_created: SortDirection
_modified: SortDirection
_deleted: SortDirection
}

type Application {
  key: ID! @cost
  _id: ID! @cost
  customProperties(filter: CustomPropertiesFilter): JSON! @cost
  name: String @cost
  description: String @cost
  cpe: String @cost
  is_os: Boolean @cost
  owner: String @cost
  owner_code: String @cost
  last_access_time: Float @cost
  threat_score: Float @cost
  app_type: String @cost
  cumulative_score: Float @cost
  current_score: Float @cost
  critical: Float @cost
  high: Float @cost
  medium: Float @cost
  low: Float @cost
  first_occurrence: Float @cost
  last_occurrence: Float @cost
  status: String @cost
  _created: Date @cost
  _modified: Date @cost
  _deleted: Date @cost
  tag: [String] @cost
  untag: [String] @cost
  source: String @cost
  "Default nested items = 10, use limit filter to adjust"
  assetEdges(filter: AssetApplicationEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [AssetApplicationEdgeSort]): [AssetApplicationEdge]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  assets(filter: AssetFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [AssetSort]): [Asset]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  portEdges(filter: ApplicationPortEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [ApplicationPortEdgeSort]): [ApplicationPortEdge]!
    @cost(complexity: 1)
  "Default nested items = 10, use limit filter to adjust"
  ports(filter: PortFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [PortSort]): [Port]!
    @cost(complexity: 1)
  "Default nested items = 10, use limit filter to adjust"
  accountEdges(filter: AccountApplicationEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [AccountApplicationEdgeSort]): [AccountApplicationEdge]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  accounts(filter: AccountFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [AccountSort]): [Account]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  ipAddrEdges(filter: ApplicationIpAddrEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [ApplicationIpAddrEdgeSort]): [ApplicationIpAddrEdge]!
    @cost(complexity: 1)
  "Default nested items = 10, use limit filter to adjust"
  ipAddrs(filter: IpAddrFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [IpAddrSort]): [IpAddr]!
    @cost(complexity: 1)
  "Default nested items = 10, use limit filter to adjust"
  businessprocessEdges(filter: BusinessprocessApplicationEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [BusinessprocessApplicationEdgeSort]): [BusinessprocessApplicationEdge]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  businessprocesses(filter: BusinessprocessFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [BusinessprocessSort]): [Businessprocess]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  databaseEdges(filter: ApplicationDatabaseEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [ApplicationDatabaseEdgeSort]): [ApplicationDatabaseEdge]!
    @cost(complexity: 1)
  "Default nested items = 10, use limit filter to adjust"
  databases(filter: DatabaseFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [DatabaseSort]): [Database]!
    @cost(complexity: 1)
  "Default nested items = 10, use limit filter to adjust"
  vulnerabilityEdges(filter: ApplicationVulnerabilityEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [ApplicationVulnerabilityEdgeSort]): [ApplicationVulnerabilityEdge]!
    @cost(complexity: 1)
  "Default nested items = 10, use limit filter to adjust"
  vulnerabilities(filter: VulnerabilityFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [VulnerabilitySort]): [Vulnerability]!
    @cost(complexity: 1)
  "Default nested items = 10, use limit filter to adjust"
  tagEdges(filter: TagApplicationEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [TagApplicationEdgeSort]): [TagApplicationEdge]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  tags(filter: TagFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [TagSort]): [Tag]!
    @cost(complexity: 0, multipliers: ["limit"])
}
input ApplicationSort {
key: SortDirection
name: SortDirection
last_access_time: SortDirection
threat_score: SortDirection
cumulative_score: SortDirection
current_score: SortDirection
_created: SortDirection
_modified: SortDirection
_deleted: SortDirection
}

type Hostname {
  key: ID! @cost
  _id: ID! @cost
  customProperties(filter: CustomPropertiesFilter): JSON! @cost
  _created: Date @cost
  _modified: Date @cost
  _deleted: Date @cost
  tag: [String] @cost
  untag: [String] @cost
  "Default nested items = 10, use limit filter to adjust"
  assetEdges(filter: AssetHostnameEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [AssetHostnameEdgeSort]): [AssetHostnameEdge]!
    @cost(complexity: 1)
  "Default nested items = 10, use limit filter to adjust"
  assets(filter: AssetFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [AssetSort]): [Asset]!
    @cost(complexity: 1)
  "Default nested items = 10, use limit filter to adjust"
  ipAddrEdges(filter: IpAddrHostnameEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [IpAddrHostnameEdgeSort]): [IpAddrHostnameEdge]!
    @cost(complexity: 1)
  "Default nested items = 10, use limit filter to adjust"
  ipAddrs(filter: IpAddrFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [IpAddrSort]): [IpAddr]!
    @cost(complexity: 1)
  "Default nested items = 10, use limit filter to adjust"
  accountEdges(filter: AccountHostnameEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [AccountHostnameEdgeSort]): [AccountHostnameEdge]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  accounts(filter: AccountFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [AccountSort]): [Account]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  tagEdges(filter: TagHostnameEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [TagHostnameEdgeSort]): [TagHostnameEdge]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  tags(filter: TagFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [TagSort]): [Tag]!
    @cost(complexity: 0, multipliers: ["limit"])
}
input HostnameSort {
key: SortDirection
_created: SortDirection
_modified: SortDirection
_deleted: SortDirection
}

type Businessprocess {
  key: ID! @cost
  _id: ID! @cost
  customProperties(filter: CustomPropertiesFilter): JSON! @cost
  name: String @cost
  description: String @cost
  _created: Date @cost
  _modified: Date @cost
  _deleted: Date @cost
  tag: [String] @cost
  untag: [String] @cost
  source: String @cost
  "Default nested items = 10, use limit filter to adjust"
  applicationEdges(filter: BusinessprocessApplicationEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [BusinessprocessApplicationEdgeSort]): [BusinessprocessApplicationEdge]!
    @cost(complexity: 1)
  "Default nested items = 10, use limit filter to adjust"
  applications(filter: ApplicationFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [ApplicationSort]): [Application]!
    @cost(complexity: 1)
  "Default nested items = 10, use limit filter to adjust"
  accountEdges(filter: BusinessprocessAccountEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [BusinessprocessAccountEdgeSort]): [BusinessprocessAccountEdge]!
    @cost(complexity: 1)
  "Default nested items = 10, use limit filter to adjust"
  accounts(filter: AccountFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [AccountSort]): [Account]!
    @cost(complexity: 1)
  "Default nested items = 10, use limit filter to adjust"
  tagEdges(filter: TagBusinessprocessEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [TagBusinessprocessEdgeSort]): [TagBusinessprocessEdge]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  tags(filter: TagFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [TagSort]): [Tag]!
    @cost(complexity: 0, multipliers: ["limit"])
}
input BusinessprocessSort {
key: SortDirection
name: SortDirection
_created: SortDirection
_modified: SortDirection
_deleted: SortDirection
}

type Database {
  key: ID! @cost
  _id: ID! @cost
  customProperties(filter: CustomPropertiesFilter): JSON! @cost
  name: String @cost
  description: String @cost
  type: String @cost
  modified: Float @cost
  protocol: String @cost
  port: String @cost
  datasource_name: String @cost
  _created: Date @cost
  _modified: Date @cost
  _deleted: Date @cost
  tag: [String] @cost
  untag: [String] @cost
  source: String @cost
  "Default nested items = 10, use limit filter to adjust"
  assetEdges(filter: AssetDatabaseEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [AssetDatabaseEdgeSort]): [AssetDatabaseEdge]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  assets(filter: AssetFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [AssetSort]): [Asset]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  applicationEdges(filter: ApplicationDatabaseEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [ApplicationDatabaseEdgeSort]): [ApplicationDatabaseEdge]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  applications(filter: ApplicationFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [ApplicationSort]): [Application]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  ipAddrEdges(filter: DatabaseIpAddrEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [DatabaseIpAddrEdgeSort]): [DatabaseIpAddrEdge]!
    @cost(complexity: 1)
  "Default nested items = 10, use limit filter to adjust"
  ipAddrs(filter: IpAddrFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [IpAddrSort]): [IpAddr]!
    @cost(complexity: 1)
  "Default nested items = 10, use limit filter to adjust"
  vulnerabilityEdges(filter: DatabaseVulnerabilityEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [DatabaseVulnerabilityEdgeSort]): [DatabaseVulnerabilityEdge]!
    @cost(complexity: 1)
  "Default nested items = 10, use limit filter to adjust"
  vulnerabilities(filter: VulnerabilityFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [VulnerabilitySort]): [Vulnerability]!
    @cost(complexity: 1)
  "Default nested items = 10, use limit filter to adjust"
  accountEdges(filter: AccountDatabaseEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [AccountDatabaseEdgeSort]): [AccountDatabaseEdge]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  accounts(filter: AccountFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [AccountSort]): [Account]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  tagEdges(filter: TagDatabaseEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [TagDatabaseEdgeSort]): [TagDatabaseEdge]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  tags(filter: TagFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [TagSort]): [Tag]!
    @cost(complexity: 0, multipliers: ["limit"])
}
input DatabaseSort {
key: SortDirection
name: SortDirection
_created: SortDirection
_modified: SortDirection
_deleted: SortDirection
}

type MacAddr {
  key: ID! @cost
  _id: ID! @cost
  customProperties(filter: CustomPropertiesFilter): JSON! @cost
  interface: String @cost
  _created: Date @cost
  _modified: Date @cost
  _deleted: Date @cost
  tag: [String] @cost
  untag: [String] @cost
  "Default nested items = 10, use limit filter to adjust"
  assetEdges(filter: AssetMacAddrEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [AssetMacAddrEdgeSort]): [AssetMacAddrEdge]!
    @cost(complexity: 1)
  "Default nested items = 10, use limit filter to adjust"
  assets(filter: AssetFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [AssetSort]): [Asset]!
    @cost(complexity: 1)
  "Default nested items = 10, use limit filter to adjust"
  ipAddrEdges(filter: IpAddrMacAddrEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [IpAddrMacAddrEdgeSort]): [IpAddrMacAddrEdge]!
    @cost(complexity: 1)
  "Default nested items = 10, use limit filter to adjust"
  ipAddrs(filter: IpAddrFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [IpAddrSort]): [IpAddr]!
    @cost(complexity: 1)
  "Default nested items = 10, use limit filter to adjust"
  tagEdges(filter: TagMacAddrEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [TagMacAddrEdgeSort]): [TagMacAddrEdge]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  tags(filter: TagFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [TagSort]): [Tag]!
    @cost(complexity: 0, multipliers: ["limit"])
}
input MacAddrSort {
key: SortDirection
_created: SortDirection
_modified: SortDirection
_deleted: SortDirection
}

type Report {
  key: ID! @cost
  _id: ID! @cost
  customProperties(filter: CustomPropertiesFilter): JSON! @cost
  type: String @cost
  parameters: String @cost
  value: String @cost
  modified: Date @cost
  description: String @cost
  _created: Date @cost
  _modified: Date @cost
  _deleted: Date @cost
  tag: [String] @cost
  untag: [String] @cost
}
input ReportSort {
key: SortDirection
_created: SortDirection
_modified: SortDirection
_deleted: SortDirection
}

type Port {
  key: ID! @cost
  _id: ID! @cost
  customProperties(filter: CustomPropertiesFilter): JSON! @cost
  port_number: Int @cost
  status: String @cost
  protocol: String @cost
  description: String @cost
  _created: Date @cost
  _modified: Date @cost
  _deleted: Date @cost
  tag: [String] @cost
  untag: [String] @cost
  source: String @cost
  "Default nested items = 10, use limit filter to adjust"
  applicationEdges(filter: ApplicationPortEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [ApplicationPortEdgeSort]): [ApplicationPortEdge]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  applications(filter: ApplicationFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [ApplicationSort]): [Application]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  ipAddrEdges(filter: IpAddrPortEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [IpAddrPortEdgeSort]): [IpAddrPortEdge]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  ipAddrs(filter: IpAddrFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [IpAddrSort]): [IpAddr]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  vulnerabilityEdges(filter: PortVulnerabilityEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [PortVulnerabilityEdgeSort]): [PortVulnerabilityEdge]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  vulnerabilities(filter: VulnerabilityFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [VulnerabilitySort]): [Vulnerability]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  tagEdges(filter: TagPortEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [TagPortEdgeSort]): [TagPortEdge]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  tags(filter: TagFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [TagSort]): [Tag]!
    @cost(complexity: 0, multipliers: ["limit"])
}
input PortSort {
key: SortDirection
_created: SortDirection
_modified: SortDirection
_deleted: SortDirection
}

type Source {
  key: ID! @cost
  _id: ID! @cost
  customProperties(filter: CustomPropertiesFilter): JSON! @cost
  description: String @cost
  product_link: String @cost
  _created: Date @cost
  _modified: Date @cost
  _deleted: Date @cost
  tag: [String] @cost
  untag: [String] @cost
}
input SourceSort {
key: SortDirection
_created: SortDirection
_modified: SortDirection
_deleted: SortDirection
}

type Vulnerability {
  key: ID! @cost
  _id: ID! @cost
  customProperties(filter: CustomPropertiesFilter): JSON! @cost
  external_properties: String @cost
  external_reference: String @cost
  name: String @cost
  base_score: Float @cost
  description: String @cost
  disclosed_on: Float @cost
  published_on: Float @cost
  updated_on: Float @cost
  _created: Date @cost
  _modified: Date @cost
  _deleted: Date @cost
  tag: [String] @cost
  untag: [String] @cost
  source: String @cost
  "Default nested items = 10, use limit filter to adjust"
  assetEdges(filter: AssetVulnerabilityEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [AssetVulnerabilityEdgeSort]): [AssetVulnerabilityEdge]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  assets(filter: AssetFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [AssetSort]): [Asset]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  applicationEdges(filter: ApplicationVulnerabilityEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [ApplicationVulnerabilityEdgeSort]): [ApplicationVulnerabilityEdge]!
    @cost(complexity: 1)
  "Default nested items = 10, use limit filter to adjust"
  applications(filter: ApplicationFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [ApplicationSort]): [Application]!
    @cost(complexity: 1)
  "Default nested items = 10, use limit filter to adjust"
  databaseEdges(filter: DatabaseVulnerabilityEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [DatabaseVulnerabilityEdgeSort]): [DatabaseVulnerabilityEdge]!
    @cost(complexity: 1)
  "Default nested items = 10, use limit filter to adjust"
  databases(filter: DatabaseFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [DatabaseSort]): [Database]!
    @cost(complexity: 1)
  "Default nested items = 10, use limit filter to adjust"
  ipAddrEdges(filter: IpAddrVulnerabilityEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [IpAddrVulnerabilityEdgeSort]): [IpAddrVulnerabilityEdge]!
    @cost(complexity: 1)
  "Default nested items = 10, use limit filter to adjust"
  ipAddrs(filter: IpAddrFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [IpAddrSort]): [IpAddr]!
    @cost(complexity: 1)
  "Default nested items = 10, use limit filter to adjust"
  portEdges(filter: PortVulnerabilityEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [PortVulnerabilityEdgeSort]): [PortVulnerabilityEdge]!
    @cost(complexity: 1)
  "Default nested items = 10, use limit filter to adjust"
  ports(filter: PortFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [PortSort]): [Port]!
    @cost(complexity: 1)
  "Default nested items = 10, use limit filter to adjust"
  tagEdges(filter: TagVulnerabilityEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [TagVulnerabilityEdgeSort]): [TagVulnerabilityEdge]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  tags(filter: TagFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [TagSort]): [Tag]!
    @cost(complexity: 0, multipliers: ["limit"])
}
input VulnerabilitySort {
key: SortDirection
name: SortDirection
base_score: SortDirection
_created: SortDirection
_modified: SortDirection
_deleted: SortDirection
}

type Tag {
  key: ID! @cost
  _id: ID! @cost
  customProperties(filter: CustomPropertiesFilter): JSON! @cost
  _created: Date @cost
  _modified: Date @cost
  _deleted: Date @cost
  tag: [String] @cost
  untag: [String] @cost
  "Default nested items = 10, use limit filter to adjust"
  assetEdges(filter: TagAssetEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [TagAssetEdgeSort]): [TagAssetEdge]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  assets(filter: AssetFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [AssetSort]): [Asset]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  containerEdges(filter: TagContainerEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [TagContainerEdgeSort]): [TagContainerEdge]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  containers(filter: ContainerFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [ContainerSort]): [Container]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  ipAddrEdges(filter: TagIpAddrEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [TagIpAddrEdgeSort]): [TagIpAddrEdge]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  ipAddrs(filter: IpAddrFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [IpAddrSort]): [IpAddr]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  unifiedUserEdges(filter: TagUnifiedUserEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [TagUnifiedUserEdgeSort]): [TagUnifiedUserEdge]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  unifiedUsers(filter: UnifiedUserFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [UnifiedUserSort]): [UnifiedUser]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  userEdges(filter: TagUserEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [TagUserEdgeSort]): [TagUserEdge]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  users(filter: UserFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [UserSort]): [User]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  unifiedAccountEdges(filter: TagUnifiedAccountEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [TagUnifiedAccountEdgeSort]): [TagUnifiedAccountEdge]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  unifiedAccounts(filter: UnifiedAccountFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [UnifiedAccountSort]): [UnifiedAccount]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  accountEdges(filter: TagAccountEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [TagAccountEdgeSort]): [TagAccountEdge]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  accounts(filter: AccountFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [AccountSort]): [Account]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  applicationEdges(filter: TagApplicationEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [TagApplicationEdgeSort]): [TagApplicationEdge]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  applications(filter: ApplicationFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [ApplicationSort]): [Application]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  hostnameEdges(filter: TagHostnameEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [TagHostnameEdgeSort]): [TagHostnameEdge]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  hostnames(filter: HostnameFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [HostnameSort]): [Hostname]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  businessprocessEdges(filter: TagBusinessprocessEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [TagBusinessprocessEdgeSort]): [TagBusinessprocessEdge]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  businessprocesses(filter: BusinessprocessFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [BusinessprocessSort]): [Businessprocess]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  databaseEdges(filter: TagDatabaseEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [TagDatabaseEdgeSort]): [TagDatabaseEdge]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  databases(filter: DatabaseFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [DatabaseSort]): [Database]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  macAddrEdges(filter: TagMacAddrEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [TagMacAddrEdgeSort]): [TagMacAddrEdge]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  macAddrs(filter: MacAddrFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [MacAddrSort]): [MacAddr]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  portEdges(filter: TagPortEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [TagPortEdgeSort]): [TagPortEdge]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  ports(filter: PortFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [PortSort]): [Port]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  vulnerabilityEdges(filter: TagVulnerabilityEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [TagVulnerabilityEdgeSort]): [TagVulnerabilityEdge]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  vulnerabilities(filter: VulnerabilityFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [VulnerabilitySort]): [Vulnerability]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  geolocationEdges(filter: TagGeolocationEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [TagGeolocationEdgeSort]): [TagGeolocationEdge]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  geolocations(filter: GeolocationFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [GeolocationSort]): [Geolocation]!
    @cost(complexity: 0, multipliers: ["limit"])
}
input TagSort {
key: SortDirection
_created: SortDirection
_modified: SortDirection
_deleted: SortDirection
}

type Geolocation {
  key: ID! @cost
  _id: ID! @cost
  customProperties(filter: CustomPropertiesFilter): JSON! @cost
  region: String @cost
  longitude: Float @cost
  latitude: Float @cost
  description: String @cost
  _created: Date @cost
  _modified: Date @cost
  _deleted: Date @cost
  tag: [String] @cost
  untag: [String] @cost
  source: String @cost
  "Default nested items = 10, use limit filter to adjust"
  assetEdges(filter: AssetGeolocationEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [AssetGeolocationEdgeSort]): [AssetGeolocationEdge]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  assets(filter: AssetFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [AssetSort]): [Asset]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  ipAddrEdges(filter: IpAddrGeolocationEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [IpAddrGeolocationEdgeSort]): [IpAddrGeolocationEdge]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  ipAddrs(filter: IpAddrFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [IpAddrSort]): [IpAddr]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  tagEdges(filter: TagGeolocationEdgeFilter  "Default = 10" limit: Int = 10  offset: Int  orderBy: [TagGeolocationEdgeSort]): [TagGeolocationEdge]!
    @cost(complexity: 0, multipliers: ["limit"])
  "Default nested items = 10, use limit filter to adjust"
  tags(filter: TagFilter  "(Default = 10)" limit: Int = 10  offset: Int  orderBy: [TagSort]): [Tag]!
    @cost(complexity: 0, multipliers: ["limit"])
}
input GeolocationSort {
key: SortDirection
_created: SortDirection
_modified: SortDirection
_deleted: SortDirection
}

type AssetVulnerabilityEdgePort {
  port_number: Float @cost
  protocol: String @cost
  status: String @cost
}

type AssetVulnerabilityEdge {
  _id: ID! @cost
  _from: ID! @cost
  _to: ID! @cost
  source: String! @cost
  report: String! @cost
  customProperties(filter: CustomPropertiesFilter): JSON! @cost
  port: AssetVulnerabilityEdgePort @cost
  risk_score: Float @cost
  created: Date @cost
  modified: Date @cost
  external_id: String @cost
  _created: Date @cost
  _modified: Date @cost
  _deleted: Date @cost
  asset: Asset! @cost
  vulnerability: Vulnerability! @cost
}
input AssetVulnerabilityEdgeSort {
risk_score: SortDirection
source: SortDirection
_created: SortDirection
_modified: SortDirection
_deleted: SortDirection
}

type AssetIpAddrEdge {
  _id: ID! @cost
  _from: ID! @cost
  _to: ID! @cost
  source: String! @cost
  report: String! @cost
  customProperties(filter: CustomPropertiesFilter): JSON! @cost
  created: Date @cost
  modified: Date @cost
  external_id: String @cost
  _created: Date @cost
  _modified: Date @cost
  _deleted: Date @cost
  asset: Asset! @cost
  ipAddr: IpAddr! @cost
}
input AssetIpAddrEdgeSort {
source: SortDirection
_created: SortDirection
_modified: SortDirection
_deleted: SortDirection
}

type AssetMacAddrEdge {
  _id: ID! @cost
  _from: ID! @cost
  _to: ID! @cost
  source: String! @cost
  report: String! @cost
  customProperties(filter: CustomPropertiesFilter): JSON! @cost
  created: Date @cost
  modified: Date @cost
  external_id: String @cost
  _created: Date @cost
  _modified: Date @cost
  _deleted: Date @cost
  asset: Asset! @cost
  macAddr: MacAddr! @cost
}
input AssetMacAddrEdgeSort {
source: SortDirection
_created: SortDirection
_modified: SortDirection
_deleted: SortDirection
}

type AssetHostnameEdge {
  _id: ID! @cost
  _from: ID! @cost
  _to: ID! @cost
  source: String! @cost
  report: String! @cost
  customProperties(filter: CustomPropertiesFilter): JSON! @cost
  created: Date @cost
  modified: Date @cost
  external_id: String @cost
  _created: Date @cost
  _modified: Date @cost
  _deleted: Date @cost
  asset: Asset! @cost
  hostname: Hostname! @cost
}
input AssetHostnameEdgeSort {
source: SortDirection
_created: SortDirection
_modified: SortDirection
_deleted: SortDirection
}

type AssetAccountEdge {
  _id: ID! @cost
  _from: ID! @cost
  _to: ID! @cost
  source: String! @cost
  report: String! @cost
  customProperties(filter: CustomPropertiesFilter): JSON! @cost
  created: Date @cost
  modified: Date @cost
  external_id: String @cost
  _created: Date @cost
  _modified: Date @cost
  _deleted: Date @cost
  asset: Asset! @cost
  account: Account! @cost
}
input AssetAccountEdgeSort {
source: SortDirection
_created: SortDirection
_modified: SortDirection
_deleted: SortDirection
}

type AssetContainerEdge {
  _id: ID! @cost
  _from: ID! @cost
  _to: ID! @cost
  source: String! @cost
  report: String! @cost
  customProperties(filter: CustomPropertiesFilter): JSON! @cost
  created: Date @cost
  modified: Date @cost
  external_id: String @cost
  _created: Date @cost
  _modified: Date @cost
  _deleted: Date @cost
  asset: Asset! @cost
  container: Container! @cost
}
input AssetContainerEdgeSort {
source: SortDirection
_created: SortDirection
_modified: SortDirection
_deleted: SortDirection
}

type AssetApplicationEdge {
  _id: ID! @cost
  _from: ID! @cost
  _to: ID! @cost
  source: String! @cost
  report: String! @cost
  customProperties(filter: CustomPropertiesFilter): JSON! @cost
  created: Date @cost
  modified: Date @cost
  external_id: String @cost
  _created: Date @cost
  _modified: Date @cost
  _deleted: Date @cost
  asset: Asset! @cost
  application: Application! @cost
}
input AssetApplicationEdgeSort {
source: SortDirection
_created: SortDirection
_modified: SortDirection
_deleted: SortDirection
}

type AssetDatabaseEdge {
  _id: ID! @cost
  _from: ID! @cost
  _to: ID! @cost
  source: String! @cost
  report: String! @cost
  customProperties(filter: CustomPropertiesFilter): JSON! @cost
  created: Date @cost
  modified: Date @cost
  external_id: String @cost
  _created: Date @cost
  _modified: Date @cost
  _deleted: Date @cost
  asset: Asset! @cost
  database: Database! @cost
}
input AssetDatabaseEdgeSort {
source: SortDirection
_created: SortDirection
_modified: SortDirection
_deleted: SortDirection
}

type AssetGeolocationEdge {
  _id: ID! @cost
  _from: ID! @cost
  _to: ID! @cost
  source: String! @cost
  report: String! @cost
  customProperties(filter: CustomPropertiesFilter): JSON! @cost
  created: Date @cost
  modified: Date @cost
  external_id: String @cost
  _created: Date @cost
  _modified: Date @cost
  _deleted: Date @cost
  asset: Asset! @cost
  geolocation: Geolocation! @cost
}
input AssetGeolocationEdgeSort {
source: SortDirection
_created: SortDirection
_modified: SortDirection
_deleted: SortDirection
}

type ApplicationPortEdge {
  _id: ID! @cost
  _from: ID! @cost
  _to: ID! @cost
  source: String! @cost
  report: String! @cost
  customProperties(filter: CustomPropertiesFilter): JSON! @cost
  created: Date @cost
  modified: Date @cost
  external_id: String @cost
  _created: Date @cost
  _modified: Date @cost
  _deleted: Date @cost
  application: Application! @cost
  port: Port! @cost
}
input ApplicationPortEdgeSort {
source: SortDirection
_created: SortDirection
_modified: SortDirection
_deleted: SortDirection
}

type AccountApplicationEdge {
  _id: ID! @cost
  _from: ID! @cost
  _to: ID! @cost
  source: String! @cost
  report: String! @cost
  customProperties(filter: CustomPropertiesFilter): JSON! @cost
  user_id: String @cost
  last_access_time: Float @cost
  created: Date @cost
  modified: Date @cost
  external_id: String @cost
  _created: Date @cost
  _modified: Date @cost
  _deleted: Date @cost
  account: Account! @cost
  application: Application! @cost
}
input AccountApplicationEdgeSort {
source: SortDirection
_created: SortDirection
_modified: SortDirection
_deleted: SortDirection
}

type ApplicationIpAddrEdge {
  _id: ID! @cost
  _from: ID! @cost
  _to: ID! @cost
  source: String! @cost
  report: String! @cost
  customProperties(filter: CustomPropertiesFilter): JSON! @cost
  mappingtype: String @cost
  created: Date @cost
  modified: Date @cost
  external_id: String @cost
  _created: Date @cost
  _modified: Date @cost
  _deleted: Date @cost
  application: Application! @cost
  ipAddr: IpAddr! @cost
}
input ApplicationIpAddrEdgeSort {
source: SortDirection
_created: SortDirection
_modified: SortDirection
_deleted: SortDirection
}

type BusinessprocessApplicationEdge {
  _id: ID! @cost
  _from: ID! @cost
  _to: ID! @cost
  source: String! @cost
  report: String! @cost
  customProperties(filter: CustomPropertiesFilter): JSON! @cost
  created: Date @cost
  modified: Date @cost
  external_id: String @cost
  _created: Date @cost
  _modified: Date @cost
  _deleted: Date @cost
  businessprocess: Businessprocess! @cost
  application: Application! @cost
}
input BusinessprocessApplicationEdgeSort {
source: SortDirection
_created: SortDirection
_modified: SortDirection
_deleted: SortDirection
}

type BusinessprocessAccountEdge {
  _id: ID! @cost
  _from: ID! @cost
  _to: ID! @cost
  source: String! @cost
  report: String! @cost
  customProperties(filter: CustomPropertiesFilter): JSON! @cost
  created: Date @cost
  modified: Date @cost
  external_id: String @cost
  _created: Date @cost
  _modified: Date @cost
  _deleted: Date @cost
  businessprocess: Businessprocess! @cost
  account: Account! @cost
}
input BusinessprocessAccountEdgeSort {
source: SortDirection
_created: SortDirection
_modified: SortDirection
_deleted: SortDirection
}

type ApplicationDatabaseEdge {
  _id: ID! @cost
  _from: ID! @cost
  _to: ID! @cost
  source: String! @cost
  report: String! @cost
  customProperties(filter: CustomPropertiesFilter): JSON! @cost
  created: Date @cost
  modified: Date @cost
  external_id: String @cost
  _created: Date @cost
  _modified: Date @cost
  _deleted: Date @cost
  application: Application! @cost
  database: Database! @cost
}
input ApplicationDatabaseEdgeSort {
source: SortDirection
_created: SortDirection
_modified: SortDirection
_deleted: SortDirection
}

type ApplicationVulnerabilityEdge {
  _id: ID! @cost
  _from: ID! @cost
  _to: ID! @cost
  source: String! @cost
  report: String! @cost
  customProperties(filter: CustomPropertiesFilter): JSON! @cost
  created: Date @cost
  modified: Date @cost
  external_id: String @cost
  _created: Date @cost
  _modified: Date @cost
  _deleted: Date @cost
  application: Application! @cost
  vulnerability: Vulnerability! @cost
}
input ApplicationVulnerabilityEdgeSort {
source: SortDirection
_created: SortDirection
_modified: SortDirection
_deleted: SortDirection
}

type DatabaseIpAddrEdge {
  _id: ID! @cost
  _from: ID! @cost
  _to: ID! @cost
  source: String! @cost
  report: String! @cost
  customProperties(filter: CustomPropertiesFilter): JSON! @cost
  created: Date @cost
  modified: Date @cost
  external_id: String @cost
  _created: Date @cost
  _modified: Date @cost
  _deleted: Date @cost
  database: Database! @cost
  ipAddr: IpAddr! @cost
}
input DatabaseIpAddrEdgeSort {
source: SortDirection
_created: SortDirection
_modified: SortDirection
_deleted: SortDirection
}

type DatabaseVulnerabilityEdge {
  _id: ID! @cost
  _from: ID! @cost
  _to: ID! @cost
  source: String! @cost
  report: String! @cost
  customProperties(filter: CustomPropertiesFilter): JSON! @cost
  version_level: String @cost
  patch_level: String @cost
  full_version_info: String @cost
  result_text: String @cost
  recommendation: String @cost
  severity: String @cost
  category: String @cost
  assessment_description: String @cost
  result_details: String @cost
  created: Date @cost
  modified: Date @cost
  external_id: String @cost
  _created: Date @cost
  _modified: Date @cost
  _deleted: Date @cost
  database: Database! @cost
  vulnerability: Vulnerability! @cost
}
input DatabaseVulnerabilityEdgeSort {
severity: SortDirection
source: SortDirection
_created: SortDirection
_modified: SortDirection
_deleted: SortDirection
}

type IpAddrContainerEdge {
  _id: ID! @cost
  _from: ID! @cost
  _to: ID! @cost
  source: String! @cost
  report: String! @cost
  customProperties(filter: CustomPropertiesFilter): JSON! @cost
  created: Date @cost
  modified: Date @cost
  external_id: String @cost
  _created: Date @cost
  _modified: Date @cost
  _deleted: Date @cost
  ipAddr: IpAddr! @cost
  container: Container! @cost
}
input IpAddrContainerEdgeSort {
source: SortDirection
_created: SortDirection
_modified: SortDirection
_deleted: SortDirection
}

type IpAddrMacAddrEdge {
  _id: ID! @cost
  _from: ID! @cost
  _to: ID! @cost
  source: String! @cost
  report: String! @cost
  customProperties(filter: CustomPropertiesFilter): JSON! @cost
  created: Date @cost
  modified: Date @cost
  external_id: String @cost
  _created: Date @cost
  _modified: Date @cost
  _deleted: Date @cost
  ipAddr: IpAddr! @cost
  macAddr: MacAddr! @cost
}
input IpAddrMacAddrEdgeSort {
source: SortDirection
_created: SortDirection
_modified: SortDirection
_deleted: SortDirection
}

type IpAddrHostnameEdge {
  _id: ID! @cost
  _from: ID! @cost
  _to: ID! @cost
  source: String! @cost
  report: String! @cost
  customProperties(filter: CustomPropertiesFilter): JSON! @cost
  created: Date @cost
  modified: Date @cost
  external_id: String @cost
  _created: Date @cost
  _modified: Date @cost
  _deleted: Date @cost
  ipAddr: IpAddr! @cost
  hostname: Hostname! @cost
}
input IpAddrHostnameEdgeSort {
source: SortDirection
_created: SortDirection
_modified: SortDirection
_deleted: SortDirection
}

type IpAddrVulnerabilityEdge {
  _id: ID! @cost
  _from: ID! @cost
  _to: ID! @cost
  source: String! @cost
  report: String! @cost
  customProperties(filter: CustomPropertiesFilter): JSON! @cost
  created: Date @cost
  modified: Date @cost
  external_id: String @cost
  _created: Date @cost
  _modified: Date @cost
  _deleted: Date @cost
  ipAddr: IpAddr! @cost
  vulnerability: Vulnerability! @cost
}
input IpAddrVulnerabilityEdgeSort {
source: SortDirection
_created: SortDirection
_modified: SortDirection
_deleted: SortDirection
}

type IpAddrGeolocationEdge {
  _id: ID! @cost
  _from: ID! @cost
  _to: ID! @cost
  source: String! @cost
  report: String! @cost
  customProperties(filter: CustomPropertiesFilter): JSON! @cost
  created: Date @cost
  modified: Date @cost
  external_id: String @cost
  _created: Date @cost
  _modified: Date @cost
  _deleted: Date @cost
  ipAddr: IpAddr! @cost
  geolocation: Geolocation! @cost
}
input IpAddrGeolocationEdgeSort {
source: SortDirection
_created: SortDirection
_modified: SortDirection
_deleted: SortDirection
}

type IpAddrPortEdge {
  _id: ID! @cost
  _from: ID! @cost
  _to: ID! @cost
  source: String! @cost
  report: String! @cost
  customProperties(filter: CustomPropertiesFilter): JSON! @cost
  created: Date @cost
  modified: Date @cost
  external_id: String @cost
  _created: Date @cost
  _modified: Date @cost
  _deleted: Date @cost
  ipAddr: IpAddr! @cost
  port: Port! @cost
}
input IpAddrPortEdgeSort {
source: SortDirection
_created: SortDirection
_modified: SortDirection
_deleted: SortDirection
}

type UserAccountEdge {
  _id: ID! @cost
  _from: ID! @cost
  _to: ID! @cost
  source: String! @cost
  report: String! @cost
  customProperties(filter: CustomPropertiesFilter): JSON! @cost
  last_access_time: Float @cost
  created: Date @cost
  modified: Date @cost
  external_id: String @cost
  _created: Date @cost
  _modified: Date @cost
  _deleted: Date @cost
  user: User! @cost
  account: Account! @cost
}
input UserAccountEdgeSort {
last_access_time: SortDirection
source: SortDirection
_created: SortDirection
_modified: SortDirection
_deleted: SortDirection
}

type AccountDatabaseEdge {
  _id: ID! @cost
  _from: ID! @cost
  _to: ID! @cost
  source: String! @cost
  report: String! @cost
  customProperties(filter: CustomPropertiesFilter): JSON! @cost
  created: Date @cost
  modified: Date @cost
  external_id: String @cost
  _created: Date @cost
  _modified: Date @cost
  _deleted: Date @cost
  account: Account! @cost
  database: Database! @cost
}
input AccountDatabaseEdgeSort {
source: SortDirection
_created: SortDirection
_modified: SortDirection
_deleted: SortDirection
}

type AccountHostnameEdge {
  _id: ID! @cost
  _from: ID! @cost
  _to: ID! @cost
  source: String! @cost
  report: String! @cost
  customProperties(filter: CustomPropertiesFilter): JSON! @cost
  created: Date @cost
  modified: Date @cost
  external_id: String @cost
  _created: Date @cost
  _modified: Date @cost
  _deleted: Date @cost
  account: Account! @cost
  hostname: Hostname! @cost
}
input AccountHostnameEdgeSort {
source: SortDirection
_created: SortDirection
_modified: SortDirection
_deleted: SortDirection
}

type AccountIpAddrEdge {
  _id: ID! @cost
  _from: ID! @cost
  _to: ID! @cost
  source: String! @cost
  report: String! @cost
  customProperties(filter: CustomPropertiesFilter): JSON! @cost
  total_risk_score: Float @cost
  threat_analytics_score: Float @cost
  violations_score: Float @cost
  vulnerability_score: Float @cost
  sensitive_objects_score: Float @cost
  select_queries_score: Float @cost
  ddl_queries_score: Float @cost
  dml_queries_score: Float @cost
  administrative_queries_score: Float @cost
  high_volume_activity_score: Float @cost
  off_work_activity_score: Float @cost
  group_state_description: String @cost
  created: Date @cost
  modified: Date @cost
  external_id: String @cost
  _created: Date @cost
  _modified: Date @cost
  _deleted: Date @cost
  account: Account! @cost
  ipAddr: IpAddr! @cost
}
input AccountIpAddrEdgeSort {
total_risk_score: SortDirection
source: SortDirection
_created: SortDirection
_modified: SortDirection
_deleted: SortDirection
}

type UnifiedAccountAccountEdge {
  _id: ID! @cost
  _from: ID! @cost
  _to: ID! @cost
  source: String! @cost
  report: String! @cost
  customProperties(filter: CustomPropertiesFilter): JSON! @cost
  created: Date @cost
  modified: Date @cost
  external_id: String @cost
  _created: Date @cost
  _modified: Date @cost
  _deleted: Date @cost
  unifiedAccount: UnifiedAccount! @cost
  account: Account! @cost
}
input UnifiedAccountAccountEdgeSort {
source: SortDirection
_created: SortDirection
_modified: SortDirection
_deleted: SortDirection
}

type UnifiedUserUserEdge {
  _id: ID! @cost
  _from: ID! @cost
  _to: ID! @cost
  source: String! @cost
  report: String! @cost
  customProperties(filter: CustomPropertiesFilter): JSON! @cost
  created: Date @cost
  modified: Date @cost
  external_id: String @cost
  _created: Date @cost
  _modified: Date @cost
  _deleted: Date @cost
  unifiedUser: UnifiedUser! @cost
  user: User! @cost
}
input UnifiedUserUserEdgeSort {
source: SortDirection
_created: SortDirection
_modified: SortDirection
_deleted: SortDirection
}

type PortVulnerabilityEdge {
  _id: ID! @cost
  _from: ID! @cost
  _to: ID! @cost
  source: String! @cost
  report: String! @cost
  customProperties(filter: CustomPropertiesFilter): JSON! @cost
  created: Date @cost
  modified: Date @cost
  external_id: String @cost
  _created: Date @cost
  _modified: Date @cost
  _deleted: Date @cost
  port: Port! @cost
  vulnerability: Vulnerability! @cost
}
input PortVulnerabilityEdgeSort {
source: SortDirection
_created: SortDirection
_modified: SortDirection
_deleted: SortDirection
}

type TagAssetEdge {
  _id: ID! @cost
  _from: ID! @cost
  _to: ID! @cost
  source: String! @cost
  report: String! @cost
  customProperties(filter: CustomPropertiesFilter): JSON! @cost
  created: Date @cost
  modified: Date @cost
  external_id: String @cost
  _created: Date @cost
  _modified: Date @cost
  _deleted: Date @cost
  tag: Tag! @cost
  asset: Asset! @cost
}
input TagAssetEdgeSort {
source: SortDirection
_created: SortDirection
_modified: SortDirection
_deleted: SortDirection
}

type TagContainerEdge {
  _id: ID! @cost
  _from: ID! @cost
  _to: ID! @cost
  source: String! @cost
  report: String! @cost
  customProperties(filter: CustomPropertiesFilter): JSON! @cost
  created: Date @cost
  modified: Date @cost
  external_id: String @cost
  _created: Date @cost
  _modified: Date @cost
  _deleted: Date @cost
  tag: Tag! @cost
  container: Container! @cost
}
input TagContainerEdgeSort {
source: SortDirection
_created: SortDirection
_modified: SortDirection
_deleted: SortDirection
}

type TagIpAddrEdge {
  _id: ID! @cost
  _from: ID! @cost
  _to: ID! @cost
  source: String! @cost
  report: String! @cost
  customProperties(filter: CustomPropertiesFilter): JSON! @cost
  created: Date @cost
  modified: Date @cost
  external_id: String @cost
  _created: Date @cost
  _modified: Date @cost
  _deleted: Date @cost
  tag: Tag! @cost
  ipAddr: IpAddr! @cost
}
input TagIpAddrEdgeSort {
source: SortDirection
_created: SortDirection
_modified: SortDirection
_deleted: SortDirection
}

type TagUnifiedUserEdge {
  _id: ID! @cost
  _from: ID! @cost
  _to: ID! @cost
  source: String! @cost
  report: String! @cost
  customProperties(filter: CustomPropertiesFilter): JSON! @cost
  created: Date @cost
  modified: Date @cost
  external_id: String @cost
  _created: Date @cost
  _modified: Date @cost
  _deleted: Date @cost
  tag: Tag! @cost
  unifiedUser: UnifiedUser! @cost
}
input TagUnifiedUserEdgeSort {
source: SortDirection
_created: SortDirection
_modified: SortDirection
_deleted: SortDirection
}

type TagUserEdge {
  _id: ID! @cost
  _from: ID! @cost
  _to: ID! @cost
  source: String! @cost
  report: String! @cost
  customProperties(filter: CustomPropertiesFilter): JSON! @cost
  created: Date @cost
  modified: Date @cost
  external_id: String @cost
  _created: Date @cost
  _modified: Date @cost
  _deleted: Date @cost
  tag: Tag! @cost
  user: User! @cost
}
input TagUserEdgeSort {
source: SortDirection
_created: SortDirection
_modified: SortDirection
_deleted: SortDirection
}

type TagUnifiedAccountEdge {
  _id: ID! @cost
  _from: ID! @cost
  _to: ID! @cost
  source: String! @cost
  report: String! @cost
  customProperties(filter: CustomPropertiesFilter): JSON! @cost
  created: Date @cost
  modified: Date @cost
  external_id: String @cost
  _created: Date @cost
  _modified: Date @cost
  _deleted: Date @cost
  tag: Tag! @cost
  unifiedAccount: UnifiedAccount! @cost
}
input TagUnifiedAccountEdgeSort {
source: SortDirection
_created: SortDirection
_modified: SortDirection
_deleted: SortDirection
}

type TagAccountEdge {
  _id: ID! @cost
  _from: ID! @cost
  _to: ID! @cost
  source: String! @cost
  report: String! @cost
  customProperties(filter: CustomPropertiesFilter): JSON! @cost
  created: Date @cost
  modified: Date @cost
  external_id: String @cost
  _created: Date @cost
  _modified: Date @cost
  _deleted: Date @cost
  tag: Tag! @cost
  account: Account! @cost
}
input TagAccountEdgeSort {
source: SortDirection
_created: SortDirection
_modified: SortDirection
_deleted: SortDirection
}

type TagApplicationEdge {
  _id: ID! @cost
  _from: ID! @cost
  _to: ID! @cost
  source: String! @cost
  report: String! @cost
  customProperties(filter: CustomPropertiesFilter): JSON! @cost
  created: Date @cost
  modified: Date @cost
  external_id: String @cost
  _created: Date @cost
  _modified: Date @cost
  _deleted: Date @cost
  tag: Tag! @cost
  application: Application! @cost
}
input TagApplicationEdgeSort {
source: SortDirection
_created: SortDirection
_modified: SortDirection
_deleted: SortDirection
}

type TagHostnameEdge {
  _id: ID! @cost
  _from: ID! @cost
  _to: ID! @cost
  source: String! @cost
  report: String! @cost
  customProperties(filter: CustomPropertiesFilter): JSON! @cost
  created: Date @cost
  modified: Date @cost
  external_id: String @cost
  _created: Date @cost
  _modified: Date @cost
  _deleted: Date @cost
  tag: Tag! @cost
  hostname: Hostname! @cost
}
input TagHostnameEdgeSort {
source: SortDirection
_created: SortDirection
_modified: SortDirection
_deleted: SortDirection
}

type TagBusinessprocessEdge {
  _id: ID! @cost
  _from: ID! @cost
  _to: ID! @cost
  source: String! @cost
  report: String! @cost
  customProperties(filter: CustomPropertiesFilter): JSON! @cost
  created: Date @cost
  modified: Date @cost
  external_id: String @cost
  _created: Date @cost
  _modified: Date @cost
  _deleted: Date @cost
  tag: Tag! @cost
  businessprocess: Businessprocess! @cost
}
input TagBusinessprocessEdgeSort {
source: SortDirection
_created: SortDirection
_modified: SortDirection
_deleted: SortDirection
}

type TagDatabaseEdge {
  _id: ID! @cost
  _from: ID! @cost
  _to: ID! @cost
  source: String! @cost
  report: String! @cost
  customProperties(filter: CustomPropertiesFilter): JSON! @cost
  created: Date @cost
  modified: Date @cost
  external_id: String @cost
  _created: Date @cost
  _modified: Date @cost
  _deleted: Date @cost
  tag: Tag! @cost
  database: Database! @cost
}
input TagDatabaseEdgeSort {
source: SortDirection
_created: SortDirection
_modified: SortDirection
_deleted: SortDirection
}

type TagMacAddrEdge {
  _id: ID! @cost
  _from: ID! @cost
  _to: ID! @cost
  source: String! @cost
  report: String! @cost
  customProperties(filter: CustomPropertiesFilter): JSON! @cost
  created: Date @cost
  modified: Date @cost
  external_id: String @cost
  _created: Date @cost
  _modified: Date @cost
  _deleted: Date @cost
  tag: Tag! @cost
  macAddr: MacAddr! @cost
}
input TagMacAddrEdgeSort {
source: SortDirection
_created: SortDirection
_modified: SortDirection
_deleted: SortDirection
}

type TagPortEdge {
  _id: ID! @cost
  _from: ID! @cost
  _to: ID! @cost
  source: String! @cost
  report: String! @cost
  customProperties(filter: CustomPropertiesFilter): JSON! @cost
  created: Date @cost
  modified: Date @cost
  external_id: String @cost
  _created: Date @cost
  _modified: Date @cost
  _deleted: Date @cost
  tag: Tag! @cost
  port: Port! @cost
}
input TagPortEdgeSort {
source: SortDirection
_created: SortDirection
_modified: SortDirection
_deleted: SortDirection
}

type TagVulnerabilityEdge {
  _id: ID! @cost
  _from: ID! @cost
  _to: ID! @cost
  source: String! @cost
  report: String! @cost
  customProperties(filter: CustomPropertiesFilter): JSON! @cost
  created: Date @cost
  modified: Date @cost
  external_id: String @cost
  _created: Date @cost
  _modified: Date @cost
  _deleted: Date @cost
  tag: Tag! @cost
  vulnerability: Vulnerability! @cost
}
input TagVulnerabilityEdgeSort {
source: SortDirection
_created: SortDirection
_modified: SortDirection
_deleted: SortDirection
}

type TagGeolocationEdge {
  _id: ID! @cost
  _from: ID! @cost
  _to: ID! @cost
  source: String! @cost
  report: String! @cost
  customProperties(filter: CustomPropertiesFilter): JSON! @cost
  created: Date @cost
  modified: Date @cost
  external_id: String @cost
  _created: Date @cost
  _modified: Date @cost
  _deleted: Date @cost
  tag: Tag! @cost
  geolocation: Geolocation! @cost
}
input TagGeolocationEdgeSort {
source: SortDirection
_created: SortDirection
_modified: SortDirection
_deleted: SortDirection
}

input GlobalFilter {
  AND: [GlobalFilter!]
  OR: [GlobalFilter!]
  AT: Date
  _created_EQ: Date
  _created_GT: Date
  _created_GTE: Date
  _created_LT: Date
  _created_LTE: Date
  _modified_EQ: Date
  _modified_GT: Date
  _modified_GTE: Date
  _modified_LT: Date
  _modified_LTE: Date
}

input CustomPropertiesFilter {
  AT: Date
  id_EQ: String
  id_IN: [String!]
  id_NOTIN: [String!]
}

input AssetFilter {
  AND: [AssetFilter!]
  OR: [AssetFilter!]
  AT: Date
  name_EQ: String
  name_IN: [String!]
  name_NOTIN: [String!]
  _created_EQ: Date
  _created_GT: Date
  _created_GTE: Date
  _created_LT: Date
  _created_LTE: Date
  _modified_EQ: Date
  _modified_GT: Date
  _modified_GTE: Date
  _modified_LT: Date
  _modified_LTE: Date
  _deleted_EQ: Date
  _deleted_GT: Date
  _deleted_GTE: Date
  _deleted_LT: Date
  _deleted_LTE: Date
  source_EQ: String
  source_IN: [String!]
  source_NOTIN: [String!]
  key_EQ: ID
  key_IN: [ID!]
  key_NOTIN: [ID!]
}

input ContainerFilter {
  AND: [ContainerFilter!]
  OR: [ContainerFilter!]
  AT: Date
  _created_EQ: Date
  _created_GT: Date
  _created_GTE: Date
  _created_LT: Date
  _created_LTE: Date
  _modified_EQ: Date
  _modified_GT: Date
  _modified_GTE: Date
  _modified_LT: Date
  _modified_LTE: Date
  _deleted_EQ: Date
  _deleted_GT: Date
  _deleted_GTE: Date
  _deleted_LT: Date
  _deleted_LTE: Date
  source_EQ: String
  source_IN: [String!]
  source_NOTIN: [String!]
  key_EQ: ID
  key_IN: [ID!]
  key_NOTIN: [ID!]
}

input IpAddrFilter {
  AND: [IpAddrFilter!]
  OR: [IpAddrFilter!]
  AT: Date
  _created_EQ: Date
  _created_GT: Date
  _created_GTE: Date
  _created_LT: Date
  _created_LTE: Date
  _modified_EQ: Date
  _modified_GT: Date
  _modified_GTE: Date
  _modified_LT: Date
  _modified_LTE: Date
  _deleted_EQ: Date
  _deleted_GT: Date
  _deleted_GTE: Date
  _deleted_LT: Date
  _deleted_LTE: Date
  key_EQ: ID
  key_IN: [ID!]
  key_NOTIN: [ID!]
}

input UnifiedUserFilter {
  AND: [UnifiedUserFilter!]
  OR: [UnifiedUserFilter!]
  AT: Date
  _created_EQ: Date
  _created_GT: Date
  _created_GTE: Date
  _created_LT: Date
  _created_LTE: Date
  _modified_EQ: Date
  _modified_GT: Date
  _modified_GTE: Date
  _modified_LT: Date
  _modified_LTE: Date
  _deleted_EQ: Date
  _deleted_GT: Date
  _deleted_GTE: Date
  _deleted_LT: Date
  _deleted_LTE: Date
  key_EQ: ID
  key_IN: [ID!]
  key_NOTIN: [ID!]
}

input UserFilter {
  AND: [UserFilter!]
  OR: [UserFilter!]
  AT: Date
  fullname_EQ: String
  fullname_IN: [String!]
  fullname_NOTIN: [String!]
  email_EQ: String
  email_IN: [String!]
  email_NOTIN: [String!]
  employee_id_EQ: String
  employee_id_IN: [String!]
  employee_id_NOTIN: [String!]
  department_EQ: String
  department_IN: [String!]
  department_NOTIN: [String!]
  _created_EQ: Date
  _created_GT: Date
  _created_GTE: Date
  _created_LT: Date
  _created_LTE: Date
  _modified_EQ: Date
  _modified_GT: Date
  _modified_GTE: Date
  _modified_LT: Date
  _modified_LTE: Date
  _deleted_EQ: Date
  _deleted_GT: Date
  _deleted_GTE: Date
  _deleted_LT: Date
  _deleted_LTE: Date
  source_EQ: String
  source_IN: [String!]
  source_NOTIN: [String!]
  key_EQ: ID
  key_IN: [ID!]
  key_NOTIN: [ID!]
}

input UnifiedAccountFilter {
  AND: [UnifiedAccountFilter!]
  OR: [UnifiedAccountFilter!]
  AT: Date
  name_EQ: String
  name_IN: [String!]
  name_NOTIN: [String!]
  _created_EQ: Date
  _created_GT: Date
  _created_GTE: Date
  _created_LT: Date
  _created_LTE: Date
  _modified_EQ: Date
  _modified_GT: Date
  _modified_GTE: Date
  _modified_LT: Date
  _modified_LTE: Date
  _deleted_EQ: Date
  _deleted_GT: Date
  _deleted_GTE: Date
  _deleted_LT: Date
  _deleted_LTE: Date
  key_EQ: ID
  key_IN: [ID!]
  key_NOTIN: [ID!]
}

input AccountFilter {
  AND: [AccountFilter!]
  OR: [AccountFilter!]
  AT: Date
  name_EQ: String
  name_IN: [String!]
  name_NOTIN: [String!]
  _created_EQ: Date
  _created_GT: Date
  _created_GTE: Date
  _created_LT: Date
  _created_LTE: Date
  _modified_EQ: Date
  _modified_GT: Date
  _modified_GTE: Date
  _modified_LT: Date
  _modified_LTE: Date
  _deleted_EQ: Date
  _deleted_GT: Date
  _deleted_GTE: Date
  _deleted_LT: Date
  _deleted_LTE: Date
  source_EQ: String
  source_IN: [String!]
  source_NOTIN: [String!]
  key_EQ: ID
  key_IN: [ID!]
  key_NOTIN: [ID!]
}

input ApplicationFilter {
  AND: [ApplicationFilter!]
  OR: [ApplicationFilter!]
  AT: Date
  name_EQ: String
  name_IN: [String!]
  name_NOTIN: [String!]
  _created_EQ: Date
  _created_GT: Date
  _created_GTE: Date
  _created_LT: Date
  _created_LTE: Date
  _modified_EQ: Date
  _modified_GT: Date
  _modified_GTE: Date
  _modified_LT: Date
  _modified_LTE: Date
  _deleted_EQ: Date
  _deleted_GT: Date
  _deleted_GTE: Date
  _deleted_LT: Date
  _deleted_LTE: Date
  source_EQ: String
  source_IN: [String!]
  source_NOTIN: [String!]
  key_EQ: ID
  key_IN: [ID!]
  key_NOTIN: [ID!]
}

input HostnameFilter {
  AND: [HostnameFilter!]
  OR: [HostnameFilter!]
  AT: Date
  _created_EQ: Date
  _created_GT: Date
  _created_GTE: Date
  _created_LT: Date
  _created_LTE: Date
  _modified_EQ: Date
  _modified_GT: Date
  _modified_GTE: Date
  _modified_LT: Date
  _modified_LTE: Date
  _deleted_EQ: Date
  _deleted_GT: Date
  _deleted_GTE: Date
  _deleted_LT: Date
  _deleted_LTE: Date
  key_EQ: ID
  key_IN: [ID!]
  key_NOTIN: [ID!]
}

input BusinessprocessFilter {
  AND: [BusinessprocessFilter!]
  OR: [BusinessprocessFilter!]
  AT: Date
  name_EQ: String
  name_IN: [String!]
  name_NOTIN: [String!]
  _created_EQ: Date
  _created_GT: Date
  _created_GTE: Date
  _created_LT: Date
  _created_LTE: Date
  _modified_EQ: Date
  _modified_GT: Date
  _modified_GTE: Date
  _modified_LT: Date
  _modified_LTE: Date
  _deleted_EQ: Date
  _deleted_GT: Date
  _deleted_GTE: Date
  _deleted_LT: Date
  _deleted_LTE: Date
  source_EQ: String
  source_IN: [String!]
  source_NOTIN: [String!]
  key_EQ: ID
  key_IN: [ID!]
  key_NOTIN: [ID!]
}

input DatabaseFilter {
  AND: [DatabaseFilter!]
  OR: [DatabaseFilter!]
  AT: Date
  name_EQ: String
  name_IN: [String!]
  name_NOTIN: [String!]
  _created_EQ: Date
  _created_GT: Date
  _created_GTE: Date
  _created_LT: Date
  _created_LTE: Date
  _modified_EQ: Date
  _modified_GT: Date
  _modified_GTE: Date
  _modified_LT: Date
  _modified_LTE: Date
  _deleted_EQ: Date
  _deleted_GT: Date
  _deleted_GTE: Date
  _deleted_LT: Date
  _deleted_LTE: Date
  source_EQ: String
  source_IN: [String!]
  source_NOTIN: [String!]
  key_EQ: ID
  key_IN: [ID!]
  key_NOTIN: [ID!]
}

input MacAddrFilter {
  AND: [MacAddrFilter!]
  OR: [MacAddrFilter!]
  AT: Date
  _created_EQ: Date
  _created_GT: Date
  _created_GTE: Date
  _created_LT: Date
  _created_LTE: Date
  _modified_EQ: Date
  _modified_GT: Date
  _modified_GTE: Date
  _modified_LT: Date
  _modified_LTE: Date
  _deleted_EQ: Date
  _deleted_GT: Date
  _deleted_GTE: Date
  _deleted_LT: Date
  _deleted_LTE: Date
  key_EQ: ID
  key_IN: [ID!]
  key_NOTIN: [ID!]
}

input ReportFilter {
  AND: [ReportFilter!]
  OR: [ReportFilter!]
  AT: Date
  _created_EQ: Date
  _created_GT: Date
  _created_GTE: Date
  _created_LT: Date
  _created_LTE: Date
  _modified_EQ: Date
  _modified_GT: Date
  _modified_GTE: Date
  _modified_LT: Date
  _modified_LTE: Date
  _deleted_EQ: Date
  _deleted_GT: Date
  _deleted_GTE: Date
  _deleted_LT: Date
  _deleted_LTE: Date
  key_EQ: ID
  key_IN: [ID!]
  key_NOTIN: [ID!]
}

input PortFilter {
  AND: [PortFilter!]
  OR: [PortFilter!]
  AT: Date
  _created_EQ: Date
  _created_GT: Date
  _created_GTE: Date
  _created_LT: Date
  _created_LTE: Date
  _modified_EQ: Date
  _modified_GT: Date
  _modified_GTE: Date
  _modified_LT: Date
  _modified_LTE: Date
  _deleted_EQ: Date
  _deleted_GT: Date
  _deleted_GTE: Date
  _deleted_LT: Date
  _deleted_LTE: Date
  source_EQ: String
  source_IN: [String!]
  source_NOTIN: [String!]
  key_EQ: ID
  key_IN: [ID!]
  key_NOTIN: [ID!]
}

input SourceFilter {
  AND: [SourceFilter!]
  OR: [SourceFilter!]
  AT: Date
  _created_EQ: Date
  _created_GT: Date
  _created_GTE: Date
  _created_LT: Date
  _created_LTE: Date
  _modified_EQ: Date
  _modified_GT: Date
  _modified_GTE: Date
  _modified_LT: Date
  _modified_LTE: Date
  _deleted_EQ: Date
  _deleted_GT: Date
  _deleted_GTE: Date
  _deleted_LT: Date
  _deleted_LTE: Date
  key_EQ: ID
  key_IN: [ID!]
  key_NOTIN: [ID!]
}

input VulnerabilityFilter {
  AND: [VulnerabilityFilter!]
  OR: [VulnerabilityFilter!]
  AT: Date
  _created_EQ: Date
  _created_GT: Date
  _created_GTE: Date
  _created_LT: Date
  _created_LTE: Date
  _modified_EQ: Date
  _modified_GT: Date
  _modified_GTE: Date
  _modified_LT: Date
  _modified_LTE: Date
  _deleted_EQ: Date
  _deleted_GT: Date
  _deleted_GTE: Date
  _deleted_LT: Date
  _deleted_LTE: Date
  source_EQ: String
  source_IN: [String!]
  source_NOTIN: [String!]
  key_EQ: ID
  key_IN: [ID!]
  key_NOTIN: [ID!]
}

input TagFilter {
  AND: [TagFilter!]
  OR: [TagFilter!]
  AT: Date
  _created_EQ: Date
  _created_GT: Date
  _created_GTE: Date
  _created_LT: Date
  _created_LTE: Date
  _modified_EQ: Date
  _modified_GT: Date
  _modified_GTE: Date
  _modified_LT: Date
  _modified_LTE: Date
  _deleted_EQ: Date
  _deleted_GT: Date
  _deleted_GTE: Date
  _deleted_LT: Date
  _deleted_LTE: Date
  key_EQ: ID
  key_IN: [ID!]
  key_NOTIN: [ID!]
}

input GeolocationFilter {
  AND: [GeolocationFilter!]
  OR: [GeolocationFilter!]
  AT: Date
  _created_EQ: Date
  _created_GT: Date
  _created_GTE: Date
  _created_LT: Date
  _created_LTE: Date
  _modified_EQ: Date
  _modified_GT: Date
  _modified_GTE: Date
  _modified_LT: Date
  _modified_LTE: Date
  _deleted_EQ: Date
  _deleted_GT: Date
  _deleted_GTE: Date
  _deleted_LT: Date
  _deleted_LTE: Date
  source_EQ: String
  source_IN: [String!]
  source_NOTIN: [String!]
  key_EQ: ID
  key_IN: [ID!]
  key_NOTIN: [ID!]
}

input AssetVulnerabilityEdgeFilter {
  AND: [AssetVulnerabilityEdgeFilter!]
  OR: [AssetVulnerabilityEdgeFilter!]
  AT: Date
  source_EQ: String
  source_IN: [String!]
  source_NOTIN: [String!]
  _created_EQ: Date
  _created_GT: Date
  _created_GTE: Date
  _created_LT: Date
  _created_LTE: Date
  _modified_EQ: Date
  _modified_GT: Date
  _modified_GTE: Date
  _modified_LT: Date
  _modified_LTE: Date
  _deleted_EQ: Date
  _deleted_GT: Date
  _deleted_GTE: Date
  _deleted_LT: Date
  _deleted_LTE: Date
}

input AssetVulnerabilityEdgePortFilter {
  AND: [AssetVulnerabilityEdgePortFilter!]
  OR: [AssetVulnerabilityEdgePortFilter!]
  AT: Date
}

input AssetIpAddrEdgeFilter {
  AND: [AssetIpAddrEdgeFilter!]
  OR: [AssetIpAddrEdgeFilter!]
  AT: Date
  source_EQ: String
  source_IN: [String!]
  source_NOTIN: [String!]
  _created_EQ: Date
  _created_GT: Date
  _created_GTE: Date
  _created_LT: Date
  _created_LTE: Date
  _modified_EQ: Date
  _modified_GT: Date
  _modified_GTE: Date
  _modified_LT: Date
  _modified_LTE: Date
  _deleted_EQ: Date
  _deleted_GT: Date
  _deleted_GTE: Date
  _deleted_LT: Date
  _deleted_LTE: Date
}

input AssetMacAddrEdgeFilter {
  AND: [AssetMacAddrEdgeFilter!]
  OR: [AssetMacAddrEdgeFilter!]
  AT: Date
  source_EQ: String
  source_IN: [String!]
  source_NOTIN: [String!]
  _created_EQ: Date
  _created_GT: Date
  _created_GTE: Date
  _created_LT: Date
  _created_LTE: Date
  _modified_EQ: Date
  _modified_GT: Date
  _modified_GTE: Date
  _modified_LT: Date
  _modified_LTE: Date
  _deleted_EQ: Date
  _deleted_GT: Date
  _deleted_GTE: Date
  _deleted_LT: Date
  _deleted_LTE: Date
}

input AssetHostnameEdgeFilter {
  AND: [AssetHostnameEdgeFilter!]
  OR: [AssetHostnameEdgeFilter!]
  AT: Date
  source_EQ: String
  source_IN: [String!]
  source_NOTIN: [String!]
  _created_EQ: Date
  _created_GT: Date
  _created_GTE: Date
  _created_LT: Date
  _created_LTE: Date
  _modified_EQ: Date
  _modified_GT: Date
  _modified_GTE: Date
  _modified_LT: Date
  _modified_LTE: Date
  _deleted_EQ: Date
  _deleted_GT: Date
  _deleted_GTE: Date
  _deleted_LT: Date
  _deleted_LTE: Date
}

input AssetAccountEdgeFilter {
  AND: [AssetAccountEdgeFilter!]
  OR: [AssetAccountEdgeFilter!]
  AT: Date
  source_EQ: String
  source_IN: [String!]
  source_NOTIN: [String!]
  _created_EQ: Date
  _created_GT: Date
  _created_GTE: Date
  _created_LT: Date
  _created_LTE: Date
  _modified_EQ: Date
  _modified_GT: Date
  _modified_GTE: Date
  _modified_LT: Date
  _modified_LTE: Date
  _deleted_EQ: Date
  _deleted_GT: Date
  _deleted_GTE: Date
  _deleted_LT: Date
  _deleted_LTE: Date
}

input AssetContainerEdgeFilter {
  AND: [AssetContainerEdgeFilter!]
  OR: [AssetContainerEdgeFilter!]
  AT: Date
  source_EQ: String
  source_IN: [String!]
  source_NOTIN: [String!]
  _created_EQ: Date
  _created_GT: Date
  _created_GTE: Date
  _created_LT: Date
  _created_LTE: Date
  _modified_EQ: Date
  _modified_GT: Date
  _modified_GTE: Date
  _modified_LT: Date
  _modified_LTE: Date
  _deleted_EQ: Date
  _deleted_GT: Date
  _deleted_GTE: Date
  _deleted_LT: Date
  _deleted_LTE: Date
}

input AssetApplicationEdgeFilter {
  AND: [AssetApplicationEdgeFilter!]
  OR: [AssetApplicationEdgeFilter!]
  AT: Date
  source_EQ: String
  source_IN: [String!]
  source_NOTIN: [String!]
  _created_EQ: Date
  _created_GT: Date
  _created_GTE: Date
  _created_LT: Date
  _created_LTE: Date
  _modified_EQ: Date
  _modified_GT: Date
  _modified_GTE: Date
  _modified_LT: Date
  _modified_LTE: Date
  _deleted_EQ: Date
  _deleted_GT: Date
  _deleted_GTE: Date
  _deleted_LT: Date
  _deleted_LTE: Date
}

input AssetDatabaseEdgeFilter {
  AND: [AssetDatabaseEdgeFilter!]
  OR: [AssetDatabaseEdgeFilter!]
  AT: Date
  source_EQ: String
  source_IN: [String!]
  source_NOTIN: [String!]
  _created_EQ: Date
  _created_GT: Date
  _created_GTE: Date
  _created_LT: Date
  _created_LTE: Date
  _modified_EQ: Date
  _modified_GT: Date
  _modified_GTE: Date
  _modified_LT: Date
  _modified_LTE: Date
  _deleted_EQ: Date
  _deleted_GT: Date
  _deleted_GTE: Date
  _deleted_LT: Date
  _deleted_LTE: Date
}

input AssetGeolocationEdgeFilter {
  AND: [AssetGeolocationEdgeFilter!]
  OR: [AssetGeolocationEdgeFilter!]
  AT: Date
  source_EQ: String
  source_IN: [String!]
  source_NOTIN: [String!]
  _created_EQ: Date
  _created_GT: Date
  _created_GTE: Date
  _created_LT: Date
  _created_LTE: Date
  _modified_EQ: Date
  _modified_GT: Date
  _modified_GTE: Date
  _modified_LT: Date
  _modified_LTE: Date
  _deleted_EQ: Date
  _deleted_GT: Date
  _deleted_GTE: Date
  _deleted_LT: Date
  _deleted_LTE: Date
}

input ApplicationPortEdgeFilter {
  AND: [ApplicationPortEdgeFilter!]
  OR: [ApplicationPortEdgeFilter!]
  AT: Date
  source_EQ: String
  source_IN: [String!]
  source_NOTIN: [String!]
  _created_EQ: Date
  _created_GT: Date
  _created_GTE: Date
  _created_LT: Date
  _created_LTE: Date
  _modified_EQ: Date
  _modified_GT: Date
  _modified_GTE: Date
  _modified_LT: Date
  _modified_LTE: Date
  _deleted_EQ: Date
  _deleted_GT: Date
  _deleted_GTE: Date
  _deleted_LT: Date
  _deleted_LTE: Date
}

input AccountApplicationEdgeFilter {
  AND: [AccountApplicationEdgeFilter!]
  OR: [AccountApplicationEdgeFilter!]
  AT: Date
  source_EQ: String
  source_IN: [String!]
  source_NOTIN: [String!]
  _created_EQ: Date
  _created_GT: Date
  _created_GTE: Date
  _created_LT: Date
  _created_LTE: Date
  _modified_EQ: Date
  _modified_GT: Date
  _modified_GTE: Date
  _modified_LT: Date
  _modified_LTE: Date
  _deleted_EQ: Date
  _deleted_GT: Date
  _deleted_GTE: Date
  _deleted_LT: Date
  _deleted_LTE: Date
}

input ApplicationIpAddrEdgeFilter {
  AND: [ApplicationIpAddrEdgeFilter!]
  OR: [ApplicationIpAddrEdgeFilter!]
  AT: Date
  source_EQ: String
  source_IN: [String!]
  source_NOTIN: [String!]
  _created_EQ: Date
  _created_GT: Date
  _created_GTE: Date
  _created_LT: Date
  _created_LTE: Date
  _modified_EQ: Date
  _modified_GT: Date
  _modified_GTE: Date
  _modified_LT: Date
  _modified_LTE: Date
  _deleted_EQ: Date
  _deleted_GT: Date
  _deleted_GTE: Date
  _deleted_LT: Date
  _deleted_LTE: Date
}

input BusinessprocessApplicationEdgeFilter {
  AND: [BusinessprocessApplicationEdgeFilter!]
  OR: [BusinessprocessApplicationEdgeFilter!]
  AT: Date
  source_EQ: String
  source_IN: [String!]
  source_NOTIN: [String!]
  _created_EQ: Date
  _created_GT: Date
  _created_GTE: Date
  _created_LT: Date
  _created_LTE: Date
  _modified_EQ: Date
  _modified_GT: Date
  _modified_GTE: Date
  _modified_LT: Date
  _modified_LTE: Date
  _deleted_EQ: Date
  _deleted_GT: Date
  _deleted_GTE: Date
  _deleted_LT: Date
  _deleted_LTE: Date
}

input BusinessprocessAccountEdgeFilter {
  AND: [BusinessprocessAccountEdgeFilter!]
  OR: [BusinessprocessAccountEdgeFilter!]
  AT: Date
  source_EQ: String
  source_IN: [String!]
  source_NOTIN: [String!]
  _created_EQ: Date
  _created_GT: Date
  _created_GTE: Date
  _created_LT: Date
  _created_LTE: Date
  _modified_EQ: Date
  _modified_GT: Date
  _modified_GTE: Date
  _modified_LT: Date
  _modified_LTE: Date
  _deleted_EQ: Date
  _deleted_GT: Date
  _deleted_GTE: Date
  _deleted_LT: Date
  _deleted_LTE: Date
}

input ApplicationDatabaseEdgeFilter {
  AND: [ApplicationDatabaseEdgeFilter!]
  OR: [ApplicationDatabaseEdgeFilter!]
  AT: Date
  source_EQ: String
  source_IN: [String!]
  source_NOTIN: [String!]
  _created_EQ: Date
  _created_GT: Date
  _created_GTE: Date
  _created_LT: Date
  _created_LTE: Date
  _modified_EQ: Date
  _modified_GT: Date
  _modified_GTE: Date
  _modified_LT: Date
  _modified_LTE: Date
  _deleted_EQ: Date
  _deleted_GT: Date
  _deleted_GTE: Date
  _deleted_LT: Date
  _deleted_LTE: Date
}

input ApplicationVulnerabilityEdgeFilter {
  AND: [ApplicationVulnerabilityEdgeFilter!]
  OR: [ApplicationVulnerabilityEdgeFilter!]
  AT: Date
  source_EQ: String
  source_IN: [String!]
  source_NOTIN: [String!]
  _created_EQ: Date
  _created_GT: Date
  _created_GTE: Date
  _created_LT: Date
  _created_LTE: Date
  _modified_EQ: Date
  _modified_GT: Date
  _modified_GTE: Date
  _modified_LT: Date
  _modified_LTE: Date
  _deleted_EQ: Date
  _deleted_GT: Date
  _deleted_GTE: Date
  _deleted_LT: Date
  _deleted_LTE: Date
}

input DatabaseIpAddrEdgeFilter {
  AND: [DatabaseIpAddrEdgeFilter!]
  OR: [DatabaseIpAddrEdgeFilter!]
  AT: Date
  source_EQ: String
  source_IN: [String!]
  source_NOTIN: [String!]
  _created_EQ: Date
  _created_GT: Date
  _created_GTE: Date
  _created_LT: Date
  _created_LTE: Date
  _modified_EQ: Date
  _modified_GT: Date
  _modified_GTE: Date
  _modified_LT: Date
  _modified_LTE: Date
  _deleted_EQ: Date
  _deleted_GT: Date
  _deleted_GTE: Date
  _deleted_LT: Date
  _deleted_LTE: Date
}

input DatabaseVulnerabilityEdgeFilter {
  AND: [DatabaseVulnerabilityEdgeFilter!]
  OR: [DatabaseVulnerabilityEdgeFilter!]
  AT: Date
  source_EQ: String
  source_IN: [String!]
  source_NOTIN: [String!]
  _created_EQ: Date
  _created_GT: Date
  _created_GTE: Date
  _created_LT: Date
  _created_LTE: Date
  _modified_EQ: Date
  _modified_GT: Date
  _modified_GTE: Date
  _modified_LT: Date
  _modified_LTE: Date
  _deleted_EQ: Date
  _deleted_GT: Date
  _deleted_GTE: Date
  _deleted_LT: Date
  _deleted_LTE: Date
}

input IpAddrContainerEdgeFilter {
  AND: [IpAddrContainerEdgeFilter!]
  OR: [IpAddrContainerEdgeFilter!]
  AT: Date
  source_EQ: String
  source_IN: [String!]
  source_NOTIN: [String!]
  _created_EQ: Date
  _created_GT: Date
  _created_GTE: Date
  _created_LT: Date
  _created_LTE: Date
  _modified_EQ: Date
  _modified_GT: Date
  _modified_GTE: Date
  _modified_LT: Date
  _modified_LTE: Date
  _deleted_EQ: Date
  _deleted_GT: Date
  _deleted_GTE: Date
  _deleted_LT: Date
  _deleted_LTE: Date
}

input IpAddrMacAddrEdgeFilter {
  AND: [IpAddrMacAddrEdgeFilter!]
  OR: [IpAddrMacAddrEdgeFilter!]
  AT: Date
  source_EQ: String
  source_IN: [String!]
  source_NOTIN: [String!]
  _created_EQ: Date
  _created_GT: Date
  _created_GTE: Date
  _created_LT: Date
  _created_LTE: Date
  _modified_EQ: Date
  _modified_GT: Date
  _modified_GTE: Date
  _modified_LT: Date
  _modified_LTE: Date
  _deleted_EQ: Date
  _deleted_GT: Date
  _deleted_GTE: Date
  _deleted_LT: Date
  _deleted_LTE: Date
}

input IpAddrHostnameEdgeFilter {
  AND: [IpAddrHostnameEdgeFilter!]
  OR: [IpAddrHostnameEdgeFilter!]
  AT: Date
  source_EQ: String
  source_IN: [String!]
  source_NOTIN: [String!]
  _created_EQ: Date
  _created_GT: Date
  _created_GTE: Date
  _created_LT: Date
  _created_LTE: Date
  _modified_EQ: Date
  _modified_GT: Date
  _modified_GTE: Date
  _modified_LT: Date
  _modified_LTE: Date
  _deleted_EQ: Date
  _deleted_GT: Date
  _deleted_GTE: Date
  _deleted_LT: Date
  _deleted_LTE: Date
}

input IpAddrVulnerabilityEdgeFilter {
  AND: [IpAddrVulnerabilityEdgeFilter!]
  OR: [IpAddrVulnerabilityEdgeFilter!]
  AT: Date
  source_EQ: String
  source_IN: [String!]
  source_NOTIN: [String!]
  _created_EQ: Date
  _created_GT: Date
  _created_GTE: Date
  _created_LT: Date
  _created_LTE: Date
  _modified_EQ: Date
  _modified_GT: Date
  _modified_GTE: Date
  _modified_LT: Date
  _modified_LTE: Date
  _deleted_EQ: Date
  _deleted_GT: Date
  _deleted_GTE: Date
  _deleted_LT: Date
  _deleted_LTE: Date
}

input IpAddrGeolocationEdgeFilter {
  AND: [IpAddrGeolocationEdgeFilter!]
  OR: [IpAddrGeolocationEdgeFilter!]
  AT: Date
  source_EQ: String
  source_IN: [String!]
  source_NOTIN: [String!]
  _created_EQ: Date
  _created_GT: Date
  _created_GTE: Date
  _created_LT: Date
  _created_LTE: Date
  _modified_EQ: Date
  _modified_GT: Date
  _modified_GTE: Date
  _modified_LT: Date
  _modified_LTE: Date
  _deleted_EQ: Date
  _deleted_GT: Date
  _deleted_GTE: Date
  _deleted_LT: Date
  _deleted_LTE: Date
}

input IpAddrPortEdgeFilter {
  AND: [IpAddrPortEdgeFilter!]
  OR: [IpAddrPortEdgeFilter!]
  AT: Date
  source_EQ: String
  source_IN: [String!]
  source_NOTIN: [String!]
  _created_EQ: Date
  _created_GT: Date
  _created_GTE: Date
  _created_LT: Date
  _created_LTE: Date
  _modified_EQ: Date
  _modified_GT: Date
  _modified_GTE: Date
  _modified_LT: Date
  _modified_LTE: Date
  _deleted_EQ: Date
  _deleted_GT: Date
  _deleted_GTE: Date
  _deleted_LT: Date
  _deleted_LTE: Date
}

input UserAccountEdgeFilter {
  AND: [UserAccountEdgeFilter!]
  OR: [UserAccountEdgeFilter!]
  AT: Date
  source_EQ: String
  source_IN: [String!]
  source_NOTIN: [String!]
  _created_EQ: Date
  _created_GT: Date
  _created_GTE: Date
  _created_LT: Date
  _created_LTE: Date
  _modified_EQ: Date
  _modified_GT: Date
  _modified_GTE: Date
  _modified_LT: Date
  _modified_LTE: Date
  _deleted_EQ: Date
  _deleted_GT: Date
  _deleted_GTE: Date
  _deleted_LT: Date
  _deleted_LTE: Date
}

input AccountDatabaseEdgeFilter {
  AND: [AccountDatabaseEdgeFilter!]
  OR: [AccountDatabaseEdgeFilter!]
  AT: Date
  source_EQ: String
  source_IN: [String!]
  source_NOTIN: [String!]
  _created_EQ: Date
  _created_GT: Date
  _created_GTE: Date
  _created_LT: Date
  _created_LTE: Date
  _modified_EQ: Date
  _modified_GT: Date
  _modified_GTE: Date
  _modified_LT: Date
  _modified_LTE: Date
  _deleted_EQ: Date
  _deleted_GT: Date
  _deleted_GTE: Date
  _deleted_LT: Date
  _deleted_LTE: Date
}

input AccountHostnameEdgeFilter {
  AND: [AccountHostnameEdgeFilter!]
  OR: [AccountHostnameEdgeFilter!]
  AT: Date
  source_EQ: String
  source_IN: [String!]
  source_NOTIN: [String!]
  _created_EQ: Date
  _created_GT: Date
  _created_GTE: Date
  _created_LT: Date
  _created_LTE: Date
  _modified_EQ: Date
  _modified_GT: Date
  _modified_GTE: Date
  _modified_LT: Date
  _modified_LTE: Date
  _deleted_EQ: Date
  _deleted_GT: Date
  _deleted_GTE: Date
  _deleted_LT: Date
  _deleted_LTE: Date
}

input AccountIpAddrEdgeFilter {
  AND: [AccountIpAddrEdgeFilter!]
  OR: [AccountIpAddrEdgeFilter!]
  AT: Date
  source_EQ: String
  source_IN: [String!]
  source_NOTIN: [String!]
  _created_EQ: Date
  _created_GT: Date
  _created_GTE: Date
  _created_LT: Date
  _created_LTE: Date
  _modified_EQ: Date
  _modified_GT: Date
  _modified_GTE: Date
  _modified_LT: Date
  _modified_LTE: Date
  _deleted_EQ: Date
  _deleted_GT: Date
  _deleted_GTE: Date
  _deleted_LT: Date
  _deleted_LTE: Date
}

input UnifiedAccountAccountEdgeFilter {
  AND: [UnifiedAccountAccountEdgeFilter!]
  OR: [UnifiedAccountAccountEdgeFilter!]
  AT: Date
  source_EQ: String
  source_IN: [String!]
  source_NOTIN: [String!]
  _created_EQ: Date
  _created_GT: Date
  _created_GTE: Date
  _created_LT: Date
  _created_LTE: Date
  _modified_EQ: Date
  _modified_GT: Date
  _modified_GTE: Date
  _modified_LT: Date
  _modified_LTE: Date
  _deleted_EQ: Date
  _deleted_GT: Date
  _deleted_GTE: Date
  _deleted_LT: Date
  _deleted_LTE: Date
}

input UnifiedUserUserEdgeFilter {
  AND: [UnifiedUserUserEdgeFilter!]
  OR: [UnifiedUserUserEdgeFilter!]
  AT: Date
  source_EQ: String
  source_IN: [String!]
  source_NOTIN: [String!]
  _created_EQ: Date
  _created_GT: Date
  _created_GTE: Date
  _created_LT: Date
  _created_LTE: Date
  _modified_EQ: Date
  _modified_GT: Date
  _modified_GTE: Date
  _modified_LT: Date
  _modified_LTE: Date
  _deleted_EQ: Date
  _deleted_GT: Date
  _deleted_GTE: Date
  _deleted_LT: Date
  _deleted_LTE: Date
}

input PortVulnerabilityEdgeFilter {
  AND: [PortVulnerabilityEdgeFilter!]
  OR: [PortVulnerabilityEdgeFilter!]
  AT: Date
  source_EQ: String
  source_IN: [String!]
  source_NOTIN: [String!]
  _created_EQ: Date
  _created_GT: Date
  _created_GTE: Date
  _created_LT: Date
  _created_LTE: Date
  _modified_EQ: Date
  _modified_GT: Date
  _modified_GTE: Date
  _modified_LT: Date
  _modified_LTE: Date
  _deleted_EQ: Date
  _deleted_GT: Date
  _deleted_GTE: Date
  _deleted_LT: Date
  _deleted_LTE: Date
}

input TagAssetEdgeFilter {
  AND: [TagAssetEdgeFilter!]
  OR: [TagAssetEdgeFilter!]
  AT: Date
  source_EQ: String
  source_IN: [String!]
  source_NOTIN: [String!]
  _created_EQ: Date
  _created_GT: Date
  _created_GTE: Date
  _created_LT: Date
  _created_LTE: Date
  _modified_EQ: Date
  _modified_GT: Date
  _modified_GTE: Date
  _modified_LT: Date
  _modified_LTE: Date
  _deleted_EQ: Date
  _deleted_GT: Date
  _deleted_GTE: Date
  _deleted_LT: Date
  _deleted_LTE: Date
}

input TagContainerEdgeFilter {
  AND: [TagContainerEdgeFilter!]
  OR: [TagContainerEdgeFilter!]
  AT: Date
  source_EQ: String
  source_IN: [String!]
  source_NOTIN: [String!]
  _created_EQ: Date
  _created_GT: Date
  _created_GTE: Date
  _created_LT: Date
  _created_LTE: Date
  _modified_EQ: Date
  _modified_GT: Date
  _modified_GTE: Date
  _modified_LT: Date
  _modified_LTE: Date
  _deleted_EQ: Date
  _deleted_GT: Date
  _deleted_GTE: Date
  _deleted_LT: Date
  _deleted_LTE: Date
}

input TagIpAddrEdgeFilter {
  AND: [TagIpAddrEdgeFilter!]
  OR: [TagIpAddrEdgeFilter!]
  AT: Date
  source_EQ: String
  source_IN: [String!]
  source_NOTIN: [String!]
  _created_EQ: Date
  _created_GT: Date
  _created_GTE: Date
  _created_LT: Date
  _created_LTE: Date
  _modified_EQ: Date
  _modified_GT: Date
  _modified_GTE: Date
  _modified_LT: Date
  _modified_LTE: Date
  _deleted_EQ: Date
  _deleted_GT: Date
  _deleted_GTE: Date
  _deleted_LT: Date
  _deleted_LTE: Date
}

input TagUnifiedUserEdgeFilter {
  AND: [TagUnifiedUserEdgeFilter!]
  OR: [TagUnifiedUserEdgeFilter!]
  AT: Date
  source_EQ: String
  source_IN: [String!]
  source_NOTIN: [String!]
  _created_EQ: Date
  _created_GT: Date
  _created_GTE: Date
  _created_LT: Date
  _created_LTE: Date
  _modified_EQ: Date
  _modified_GT: Date
  _modified_GTE: Date
  _modified_LT: Date
  _modified_LTE: Date
  _deleted_EQ: Date
  _deleted_GT: Date
  _deleted_GTE: Date
  _deleted_LT: Date
  _deleted_LTE: Date
}

input TagUserEdgeFilter {
  AND: [TagUserEdgeFilter!]
  OR: [TagUserEdgeFilter!]
  AT: Date
  source_EQ: String
  source_IN: [String!]
  source_NOTIN: [String!]
  _created_EQ: Date
  _created_GT: Date
  _created_GTE: Date
  _created_LT: Date
  _created_LTE: Date
  _modified_EQ: Date
  _modified_GT: Date
  _modified_GTE: Date
  _modified_LT: Date
  _modified_LTE: Date
  _deleted_EQ: Date
  _deleted_GT: Date
  _deleted_GTE: Date
  _deleted_LT: Date
  _deleted_LTE: Date
}

input TagUnifiedAccountEdgeFilter {
  AND: [TagUnifiedAccountEdgeFilter!]
  OR: [TagUnifiedAccountEdgeFilter!]
  AT: Date
  source_EQ: String
  source_IN: [String!]
  source_NOTIN: [String!]
  _created_EQ: Date
  _created_GT: Date
  _created_GTE: Date
  _created_LT: Date
  _created_LTE: Date
  _modified_EQ: Date
  _modified_GT: Date
  _modified_GTE: Date
  _modified_LT: Date
  _modified_LTE: Date
  _deleted_EQ: Date
  _deleted_GT: Date
  _deleted_GTE: Date
  _deleted_LT: Date
  _deleted_LTE: Date
}

input TagAccountEdgeFilter {
  AND: [TagAccountEdgeFilter!]
  OR: [TagAccountEdgeFilter!]
  AT: Date
  source_EQ: String
  source_IN: [String!]
  source_NOTIN: [String!]
  _created_EQ: Date
  _created_GT: Date
  _created_GTE: Date
  _created_LT: Date
  _created_LTE: Date
  _modified_EQ: Date
  _modified_GT: Date
  _modified_GTE: Date
  _modified_LT: Date
  _modified_LTE: Date
  _deleted_EQ: Date
  _deleted_GT: Date
  _deleted_GTE: Date
  _deleted_LT: Date
  _deleted_LTE: Date
}

input TagApplicationEdgeFilter {
  AND: [TagApplicationEdgeFilter!]
  OR: [TagApplicationEdgeFilter!]
  AT: Date
  source_EQ: String
  source_IN: [String!]
  source_NOTIN: [String!]
  _created_EQ: Date
  _created_GT: Date
  _created_GTE: Date
  _created_LT: Date
  _created_LTE: Date
  _modified_EQ: Date
  _modified_GT: Date
  _modified_GTE: Date
  _modified_LT: Date
  _modified_LTE: Date
  _deleted_EQ: Date
  _deleted_GT: Date
  _deleted_GTE: Date
  _deleted_LT: Date
  _deleted_LTE: Date
}

input TagHostnameEdgeFilter {
  AND: [TagHostnameEdgeFilter!]
  OR: [TagHostnameEdgeFilter!]
  AT: Date
  source_EQ: String
  source_IN: [String!]
  source_NOTIN: [String!]
  _created_EQ: Date
  _created_GT: Date
  _created_GTE: Date
  _created_LT: Date
  _created_LTE: Date
  _modified_EQ: Date
  _modified_GT: Date
  _modified_GTE: Date
  _modified_LT: Date
  _modified_LTE: Date
  _deleted_EQ: Date
  _deleted_GT: Date
  _deleted_GTE: Date
  _deleted_LT: Date
  _deleted_LTE: Date
}

input TagBusinessprocessEdgeFilter {
  AND: [TagBusinessprocessEdgeFilter!]
  OR: [TagBusinessprocessEdgeFilter!]
  AT: Date
  source_EQ: String
  source_IN: [String!]
  source_NOTIN: [String!]
  _created_EQ: Date
  _created_GT: Date
  _created_GTE: Date
  _created_LT: Date
  _created_LTE: Date
  _modified_EQ: Date
  _modified_GT: Date
  _modified_GTE: Date
  _modified_LT: Date
  _modified_LTE: Date
  _deleted_EQ: Date
  _deleted_GT: Date
  _deleted_GTE: Date
  _deleted_LT: Date
  _deleted_LTE: Date
}

input TagDatabaseEdgeFilter {
  AND: [TagDatabaseEdgeFilter!]
  OR: [TagDatabaseEdgeFilter!]
  AT: Date
  source_EQ: String
  source_IN: [String!]
  source_NOTIN: [String!]
  _created_EQ: Date
  _created_GT: Date
  _created_GTE: Date
  _created_LT: Date
  _created_LTE: Date
  _modified_EQ: Date
  _modified_GT: Date
  _modified_GTE: Date
  _modified_LT: Date
  _modified_LTE: Date
  _deleted_EQ: Date
  _deleted_GT: Date
  _deleted_GTE: Date
  _deleted_LT: Date
  _deleted_LTE: Date
}

input TagMacAddrEdgeFilter {
  AND: [TagMacAddrEdgeFilter!]
  OR: [TagMacAddrEdgeFilter!]
  AT: Date
  source_EQ: String
  source_IN: [String!]
  source_NOTIN: [String!]
  _created_EQ: Date
  _created_GT: Date
  _created_GTE: Date
  _created_LT: Date
  _created_LTE: Date
  _modified_EQ: Date
  _modified_GT: Date
  _modified_GTE: Date
  _modified_LT: Date
  _modified_LTE: Date
  _deleted_EQ: Date
  _deleted_GT: Date
  _deleted_GTE: Date
  _deleted_LT: Date
  _deleted_LTE: Date
}

input TagPortEdgeFilter {
  AND: [TagPortEdgeFilter!]
  OR: [TagPortEdgeFilter!]
  AT: Date
  source_EQ: String
  source_IN: [String!]
  source_NOTIN: [String!]
  _created_EQ: Date
  _created_GT: Date
  _created_GTE: Date
  _created_LT: Date
  _created_LTE: Date
  _modified_EQ: Date
  _modified_GT: Date
  _modified_GTE: Date
  _modified_LT: Date
  _modified_LTE: Date
  _deleted_EQ: Date
  _deleted_GT: Date
  _deleted_GTE: Date
  _deleted_LT: Date
  _deleted_LTE: Date
}

input TagVulnerabilityEdgeFilter {
  AND: [TagVulnerabilityEdgeFilter!]
  OR: [TagVulnerabilityEdgeFilter!]
  AT: Date
  source_EQ: String
  source_IN: [String!]
  source_NOTIN: [String!]
  _created_EQ: Date
  _created_GT: Date
  _created_GTE: Date
  _created_LT: Date
  _created_LTE: Date
  _modified_EQ: Date
  _modified_GT: Date
  _modified_GTE: Date
  _modified_LT: Date
  _modified_LTE: Date
  _deleted_EQ: Date
  _deleted_GT: Date
  _deleted_GTE: Date
  _deleted_LT: Date
  _deleted_LTE: Date
}

input TagGeolocationEdgeFilter {
  AND: [TagGeolocationEdgeFilter!]
  OR: [TagGeolocationEdgeFilter!]
  AT: Date
  source_EQ: String
  source_IN: [String!]
  source_NOTIN: [String!]
  _created_EQ: Date
  _created_GT: Date
  _created_GTE: Date
  _created_LT: Date
  _created_LTE: Date
  _modified_EQ: Date
  _modified_GT: Date
  _modified_GTE: Date
  _modified_LT: Date
  _modified_LTE: Date
  _deleted_EQ: Date
  _deleted_GT: Date
  _deleted_GTE: Date
  _deleted_LT: Date
  _deleted_LTE: Date
}

